#!/usr/bin/python3
# -*- coding: utf-8 -*-

""" Feedex main executable """

import sys
sys.path.append('/usr/share/feedex/feedex')
from feedex_headers import *










def main():
    """Main class for Feedex feed reader. It parses command line and launches actions with given parameters"""


    # Check if config file is present and get fallback if needed
    if not os.path.isfile(FEEDEX_CONFIG):
        copyfile(FEEDEX_SYS_CONFIG, FEEDEX_CONFIG)
    config_file = FEEDEX_CONFIG

    # Get paths to DB and log from env
    database_file = os.getenv('FEEDEX_DB_PATH', None)
    log_file = os.getenv('FEEDEX_LOG', None)
    config_file = os.getenv('FEEDEX_CONFIG', config_file)

    # Set defaults of parameters - they can be overwriten later according to config from file and command line
    action = None
    argument = None
    argument2 = None
    argument3 = None

    params = {'print':True}

    # Command line argument parsing...
    if len(sys.argv) > 1:

        for i, arg in enumerate(sys.argv):

            if i == 0: continue

            if arg in ('-h', '--help', '--usage'):
                help_print(FEEDEX_SHORT_HELP)
                sys.exit(0)
            elif arg in ('-hh', '--help-long'):
                help_print(FEEDEX_LONG_HELP)
                sys.exit(0)
            elif arg == ('--help-feeds'):
                help_print(FEEDEX_HELP_FEEDS)
                sys.exit(0)
            elif arg == ('--help-categories'):
                help_print(FEEDEX_HELP_FEEDS)
                sys.exit(0)
            elif arg == ('--help-entries'):
                help_print(FEEDEX_HELP_ENTRIES)
                sys.exit(0)
            elif arg == ('--help-rules'):
                help_print(FEEDEX_HELP_RULES)
                sys.exit(0)
                

            elif arg in ('-v', '--version'):
                print(f"{FEEDEX_VERSION}")
                sys.exit(0)

            elif arg in ('--about',):
                help_print(FEEDEX_HELP_ABOUT)
                sys.exit(0)



            # read parameters and actions... uses utilities from feedex_utils.py for clean parsing and sanity checks

            #DISPLAY 
            elif arg == '--csv':
                params['output']='csv'
                params['print']=True
                continue
            elif arg == '--json':
                params['output']='json'
                params['print']=True
                continue


            elif arg.startswith('--delimiter='):
                params['delimiter'] = sanitize_arg(arg, str, '|', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--delimiter2='):
                params['delimiter2'] = sanitize_arg(arg, str, ';', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--escape='):
                params['delim_escape'] = sanitize_arg(arg, str, '\\', stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--trunc='):
                params['trunc'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--notify-level='):
                params['notify_level'] = sanitize_arg(arg, int, 0, exit_fail=False, valid_list=[0,1,2,3])
                continue

            elif arg == '--desktop-notify':
                params['desktop_notify'] = True
                params['print'] = True
                continue

	    #NEWS		
            elif arg in ('-g','--get-news'):
                action = 'get_news'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID', exit_fail=True, allow_none=True)
                break

            elif arg in ('-C','--check'):
                action = 'check'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to check', exit_fail=True, allow_none=True)
                break

            elif arg in ('-o','--open-in-browser'):
                action = 'open'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='entry ID or URL to open in browser', exit_fail=True, allow_none=False)
                break		

            elif arg == '--renotify':
                action = 'renotify'
                break	
				



            #FEEDS
            elif arg in ('-L','--list-feeds'):
                action = 'list_feeds'
                break

            elif arg in ('-a','--add-feed'):
                action = 'add_url'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='feed URL to download', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Handler', exit_fail=False, allow_none=True, valid_list=['rss','twitter'])
                break

            elif arg in ('-u', '--update-feeds'):
                action = 'update_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to update', exit_fail=True, allow_none=True)
                break
			
            elif arg in ('-D','--delete-feed'):
                action = 'del_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to delete', exit_fail=True, allow_none=False)
                break

            elif arg in ('-F','--read-feed'):
                action = 'read_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to browse', exit_fail=True, allow_none=False)
                break	

            elif arg == '--examine-feed':
                action = 'examine_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-feed':
                action = 'edit_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='feed parameter to change', exit_fail=True, allow_none=False)
                argument3 = slist(sys.argv, i+3, None)
                break
            elif arg in ('-N', '--show-category'):
                action = 'show_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name or ID', exit_fail=True, allow_none=False)
                break



            #ENTRIES			
            elif arg in ('-r','--read-entry'):
                action = 'read_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='etry ID to read', exit_fail=True, allow_none=False)
                break
            elif arg in ('-S','--find-similar'):
                action = 'find_similar'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='etry ID to analyse', exit_fail=True, allow_none=False)
                break

            elif arg == '--mark':
                action = 'mark'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name='read n times', exit_fail=True, allow_none=False)
                break	

            elif arg == '--flag':
                action = 'flag'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name='flag value', exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-entry':
                action = 'edit_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='new value', exit_fail=True, allow_none=False)
                break	

                	
            elif arg == '--add-entry':
                action='add_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Title', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Text', exit_fail=True, allow_none=True)
                break

            elif arg == '--add-entries-from-file':
                action='add_entries_from_file'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='File with entries', exit_fail=True, allow_none=False)
                break

            elif arg == '--add-entries-from-pipe':
                action='add_entries_from_pipe'
                break



            elif arg == '--delete-entry':
                action = 'del_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to delete', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='additional parameter', exit_fail=True, allow_none=True, valid_list=['rules_only','not_rules'])
                break
	
            # ITEM RESTORES
            elif arg == '--restore-feed':
                action = 'restore_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to restore', exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-category':
                action = 'restore_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='category ID to restore', exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-entry':
                action = 'restore_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to restore', exit_fail=True, allow_none=False)
                break


            #QUERIES
            elif arg in ('-q','--query'):
                action = 'query_entries'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, '*', singleton=True, arg_name='query phrase', exit_fail=False, allow_none=True)
                break
			


            #KEYWORDS AND RULES
            elif arg == '--show-rules':
                action = 'show_rules'
                break	

            elif arg in ('-K', '--add-keyword'):
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='keyword(s) text', exit_fail=True, allow_none=False)
                action = 'add_keyword'
                break	
            elif arg == '--add-regex':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='REGEX string', exit_fail=True, allow_none=False)
                action = 'add_regex'
                break	
            elif arg == '--add-full-text':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='search query', exit_fail=True, allow_none=False)
                action = 'add_full_text'
                break	
            elif arg == '--add-full-text-exact':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='search query', exit_fail=True, allow_none=False)
                action = 'add_full_text_exact'
                break	
            elif arg == '--edit-rule':
                action = 'edit_rule'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='rule ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='new value', exit_fail=True, allow_none=False)
                break	

            elif arg == '--delete-rule':
                action = 'del_rule'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='rule ID to delete', exit_fail=True, allow_none=False)
                break	

            elif arg == '--term-net':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='searched term', exit_fail=True, allow_none=False)
                action = 'term_net'
                break	

            elif arg == '--term-context':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='term for context', exit_fail=True, allow_none=False)
                action = 'term_context'
                break	

            elif arg == '--term-in-time':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='searched term', exit_fail=True, allow_none=False)
                action = 'term_in_time'
                break	

            elif arg == '--terms-for-entry':
                action = 'terms_for_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to extract terms from', exit_fail=True, allow_none=False)
                break	

            elif arg == '--rules-for-entry':
                action = 'rules_for_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to check rules for', exit_fail=True, allow_none=False)
                break	


            #CATEGORIES
            elif arg == '--show-categories':
                action = 'show_categories'
                break
            elif arg == '--add-category':
                action = 'add_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Category subtitle', exit_fail=False, allow_none=True)
                break
            elif arg == '--delete-category':
                action = 'del_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name or ID', exit_fail=True, allow_none=False)
                break
            elif arg == '--edit-category':
                action = 'edit_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name or ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = slist(sys.argv, i+3, None)
                break





            #MAINTENANCE
            elif arg == '--clear-history':
                action = 'clear_history'
                break
            elif arg == '--delete-query-rules':
                action = 'delete_query_rules'
                break
            elif arg == '--delete-learned-rules':
                action = 'delete_learned_rules'
                break
            elif arg == '--empty-trash':
                action = 'empty_trash'
                break

            elif arg  == '--recalculate':
                action = 'recalculate'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break	
            elif arg == '--reclassify':
                action = 'reclassify'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break	
            elif arg == '--relearn':
                action = 'relearn'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break

            elif arg == '--db-maintenance':
                action = 'db_maintenance'	
                break

            elif arg == '--export-feeds':
                action = 'export_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='output file', exit_fail=True, allow_none=False)
                break
            elif arg == '--export-rules':
                action = 'export_rules'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='output file', exit_fail=True, allow_none=False)
                break
            elif arg == '--import-feeds':
                action = 'import_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='input pickle file', exit_fail=True, allow_none=False)
                break
            elif arg == '--import-rules':
                action = 'import_rules'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='input pickle file', exit_fail=True, allow_none=False)
                break
            


            #DATABASE
            elif arg == '--lock-db':
                action = 'lock'
            elif arg == '--unlock-db':
                action = 'unlock'
            elif arg == '--db-stats':
                action = 'db_stats'
            elif arg.startswith('--timeout='):
                params['timeout'] = sanitize_arg(arg, int, 10, stripped=False, exit_fail=False)
                continue
            elif arg == '--ignore-lock':
                params['ignore_lock'] = True
                continue


            #PARAMETERS
            elif arg.startswith('--config='):
                config_file = sanitize_arg(arg, str, '', stripped=True, is_file=True, exit_fail=True)
                continue
            elif arg.startswith('--log='):
                log_file = sanitize_arg(arg, str, '', stripped=True, exit_fail=False)
                continue
            elif arg.startswith('--database='):
                database_file = sanitize_arg(arg, str, '', stripped=True, is_file=True, exit_fail=True)
                continue
            elif arg == '--debug':
                params['debug'] = True
                continue
				


            #Additional parameter (non-action)
            # Params for adding entries
            elif arg.startswith('--limit='):
                params['limit'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg == '--learn':
                params['learn'] = True
                continue
                        

            # Parameters for searching entries et al.
            elif arg.startswith('--lang='):
                params['lang'] = sanitize_arg(arg, str, 'heuristic', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--weight='):
                params['weight'] = sanitize_arg(arg, float, 2, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--handler='):
                params['handler'] = sanitize_arg(arg, str, 'rss', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--field='):
                params['field'] = sanitize_arg(arg, str, None, stripped=True, exit_fail=False)
                continue
	
            elif arg.startswith('--type='):
                params['qtype'] = sanitize_arg(arg, str, 'full', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--from='):
                params['date_from'] = sanitize_arg(arg, str, '1899-12-31', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--to='):
                params['date_to'] = sanitize_arg(arg, str, '2100-01-01', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--feed='):
                params['feed'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--category='):
                params['category'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                params['parent_id'] = params['category']
                continue
            elif arg.startswith('--handler='):
                params['handler'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--importance='):
                params['importance'] = sanitize_arg(arg, float, 1, stripped=False, exit_fail=False)
                continue


            elif arg == '--case_ins':
                params['case_ins'] = True
                continue


            elif arg == '--last':
                params['last']=True
                continue

            elif arg == '--today':
                params['today']=True
                continue

            elif arg == '--last_week':
                params['last_week']=True
                continue
            elif arg == '--last_month':
                params['last_month']=True
                continue
            elif arg == '--last_quarter':
                params['last_quarter']=True
                continue
            elif arg == '--last_year':
                params['last_year']=True
                continue
            elif arg == '--last_hour':
                params['last_hour']=True
                continue

            elif arg == '--read':
                params['read']=True
                continue

            elif arg == '--unread':
                params['unread']=True
                continue
            elif arg.startswith('--flag='):
                params['flag'] = sanitize_arg(arg, str, 'all', stripped=False, exit_fail=False, valid_list=('no','all','all_flags','1','2','3','4','5'))
                continue

            elif arg == '--deleted':
                params['deleted']=True
                continue

            elif arg == '--rev':
                params['rev']=True
                continue

            elif arg.startswith('--sort='):
                params['sort'] = "+" + sanitize_arg(arg, str, None, exit_fail=True)
                continue
            elif arg.startswith('--rsort='):
                params['sort'] = "-" + sanitize_arg(arg, str, None, exit_fail=True)
                continue


            #Term Display gimmicks
            elif arg == '--plot':
                params['plot']=True
                continue

            elif arg.startswith('--group='):
                params['group'] = sanitize_arg(arg, str, 0, exit_fail=False, valid_list=['hourly','daily','monthly'])
                continue

            elif arg.startswith('--term-width='):
                params['term_width'] = sanitize_arg(arg, int, 150, exit_fail=False)
                continue


            elif arg in ('--gui','--GUI'):
                action = 'GUI'
                break

            elif arg in ('--sql'):
                action = 'execute_SQL'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='SQL statement', exit_fail=True, allow_none=False)
                break

            else:
                sys.stderr.write("Invalid arguments given...\nMake sure that:\n - parameters are before actions\n - every parameter and action is available\n\n")
                sys.exit(2)
                    
        
    else:
        # If no args are given - run GUI (not supported(yet?) :)
        action="GUI"





    # Check if required user paths are present and if not - create them	
    check_paths((FEEDEX_SHARED_PATH, FEEDEX_ICON_PATH))
    # Parse configuration file
    config = parse_config(config_file)

    # If all failed, then here are some reasonable builtins
    config_def = DEFAULT_CONFIG
    # ... that will overwrite empty config options
    for s in config_def.keys():
        if config.get(s,None) == None:
            config[s] = config_def.get(s,None)

    # Overwrite config options if given as command line arguments
    if log_file != None:
        config['log'] = log_file
    if database_file != None:
        config['db_path'] = database_file
    params['config'] = config

    # Lazy load and run GUInterface
    if action == 'GUI':

        # GUI display ... 
        params['print'] = False        
        from feedex_gui_main import feedex_run_main_win, FeedexMainWin
        feedex_run_main_win(**params)
        return 0



    # ... CLI display and markup options ...
    if config.get('normal_color') != None and config.get('normal_color') in TCOLS.keys():
        TERM_NORMAL = config.get('normal_color')
    if config.get('flag_color') != None and config.get('flag_color') in TCOLS.keys():
        TERM_FLAG = config.get('flag_color')
    if config.get('read_color') != None and config.get('read_color') in TCOLS.keys():
        TERM_READ = config.get('read_color')
    if config.get('bold_color') != None and config.get('bold_color') in TCOLS.keys():
        TERM_SNIPPET_HIGHLIGHT = config.get('bold_color')

    if config.get('bold_markup_beg') != None and type(config.get('bold_markup_beg')) == str:
        BOLD_MARKUP_BEG = config.get('bold_markup_beg')
    if config.get('bold_markup_end') != None and type(config.get('bold_markup_end')) == str:
        BOLD_MARKUP_END = config.get('bold_markup_end')
        


    # Init the main workhorse ...
    params['single_run'] = True
    feedex = Feeder(**params)
    if feedex.db_status != 0: sys.exit(3)
    atexit.register(feedex.unlock)

    # Execute actions specified on the command line. Looks a bit convoluted, but it is not that complicated, really
    # All of the following are described in long help
    if action == 'get_news':
        feedex.fetch(id=argument, force=True, ignore_interval=True)
        if feedex.new_items > 0:
            feedex.QP.notify(**params)
    elif action == 'check':
        feedex.fetch(id=argument, force=False, ignore_interval=False)
        if feedex.new_items > 0:
            feedex.notify(**params)
    elif action == 'open':
        if argument.isdigit():
            feedex.run_entry(id=argument)
        else:
            feedex.run_entry(url=argument)

    elif action == 'renotify':
        feedex.QP.notify(**params)
        

    elif action == 'list_feeds':
        feedex.QP.list_feeds(all=params.get('debug',False))
    elif action == 'add_url':
        feedex.add_feed_from_url(argument, **params)
    elif action == 'update_feeds':
        feedex.fetch(id=argument, force=True, ignore_interval=True, update_only=True)
    elif action == 'del_feed':
        feedex.del_feed(argument, type='feed')

    elif action == 'read_feed':
        params['feed'] = argument
        params['columns'] = RESULTS_SHORT_PRINT2
        feedex.QP.query('*', params, rank=False, cnt=False, snippets=False)

    elif action == 'examine_feed':
        feedex.QP.read_feed(argument)
    elif action == 'edit_feed':
        feedex.edit_feed(argument, {argument2 : argument3}, type='feed')
		


    elif action == 'read_entry':
        feedex.QP.read_entry(argument)
    elif action == 'find_similar':
        feedex.QP.find_similar(argument, **params)
    elif action == 'mark':
        feedex.edit_entry(argument, {'read': argument2})
        if params.get('learn',False): feedex.recalculate(id=argument, learn=True, stats=False, rank=False, force=True)

    elif action == 'flag':
        feedex.edit_entry(argument, {'flag': argument2})
    elif action == 'edit_entry':
        feedex.edit_entry(argument, {argument2: argument3})
    elif action == 'add_entry':
        entry = {'title':argument, 'desc':argument2, 'feed_id':params.get('feed'), 'category':params.get('category')}
        feedex.add_entries(elist=(entry,), learn=params.get('learn',True))
    elif action == 'add_entries_from_file':
        feedex.add_entries(efile=argument, learn=params.get('learn',True))
    elif action == 'add_entries_from_pipe':
        feedex.add_entries(pipe=True, learn=params.get('learn',True))
    elif action == 'del_entry':
        feedex.del_entry(argument)

    elif action == 'show_category':
        params['category'] = argument
        params['sort'] = '+adddate'
        params['columns'] = NOTES_PRINT
        feedex.QP.query('*', params, rank=False, cnt=False, snippets=False)

    elif action == 'query_entries':
        if params.get('learn',False):
            feedex.add_rule(name=f'{argument}',type=1, case_insensitive=params.get('case_ins',True), additive=1, learned=2, weight=config.get('query_rule_weight',10))

        feedex.QP.query(argument, params, rank=True, snippets=True)
        
    elif action == 'show_rules':
        feedex.QP.show_rules()

    elif action == 'add_keyword':
        params['string'] = argument
        params['type'] = 0
        feedex.add_rule(params)
    elif action == 'add_regex':
        params['string'] = argument
        params['type'] = 3
        feedex.add_rule(params)
    elif action == 'add_full_text':
        params['string'] = argument
        params['type'] = 1
        feedex.add_rule(params)
    elif action == 'add_full_text_exact':
        params['string'] = argument
        params['type'] = 2
        feedex.add_rule(params)

    elif action == 'edit_rule':
        feedex.edit_rule(argument, {argument2: argument3})
    elif action == 'del_rule':
        feedex.del_rule(argument)


    elif action == 'term_net':
        feedex.QP.term_net(argument, **params)
    elif action == 'term_in_time':
        feedex.QP.term_in_time(argument, **params)
    elif action == 'term_context':
        feedex.QP.term_context(argument, **params)
    elif action == 'terms_for_entry':
        feedex.QP.terms_for_entry(argument)
    elif action == 'rules_for_entry':
        feedex.QP.rules_for_entry(argument)

    elif action == 'show_categories':
        feedex.QP.list_categories()
    elif action == 'add_category':
        feedex.add_feed(argument, {'subtitle':argument2, 'is_category':True})
    elif action == 'del_category':
        feedex.del_feed(argument, type='category')
    elif action == 'edit_category':
        feedex.edit_feed(argument, {argument2: argument3}, type='category')

    elif action == 'restore_feed':
        feedex.edit_feed(argument, {'deleted': 0}, type='feed')
    elif action == 'restore_category':
        feedex.edit_feed(argument, {'deleted': 0}, type='category')
    elif action == 'restore_entry':
        feedex.edit_entry(argument, {'deleted': 0})

    elif action == 'clear_history':
        feedex.clear_history()
    elif action == 'delete_query_rules':
        feedex.delete_query_rules()
    elif action == 'delete_learned_rules':
        feedex.delete_learned_rules()
    elif action == 'empty_trash':
        feedex.empty_trash()
        

    elif action == 'recalculate':
        feedex.recalculate(id=argument, stats=True, rank=False, learn=False)

    elif action == 'reclassify':
        feedex.recalculate(id=argument, rank=True, learn=False, stats=False)

    elif action == 'relearn':
        feedex.recalculate(id=argument, rank=False, learn=True, stats=False)

    elif action == 'db_maintenance':
        feedex.db_maintenance()

    elif action == 'export_feeds':
        feedex.port_data(True, argument, 'feeds')
    elif action == 'import_feeds':
        feedex.port_data(False, argument, 'feeds')
    elif action == 'export_rules':
        feedex.port_data(True, argument, 'rules')
    elif action == 'import_rules':
        feedex.port_data(False, argument, 'rules')
    


    elif action == 'unlock':
        feedex.unlock()
    elif action == 'lock':
        feedex.lock()
    elif action == 'db_stats':
        feedex.db_stats()		

    elif action == 'execute_SQL' and params.get('debug',False):
        print('Executing SQL statement...')
        feedex.sqlite_cur.execute(argument)
        feedex.sqlite_conn.commit()
        print('Done.')


    # Desktop notifications, lazy load etc.
    if params.get('desktop_notify',False) and action in ('get_news','check','renotify','query'):
        if params.get('notify_level',0) == 1 and action == 'query':
            os.stderr.write('Summary notifications cannot be performed from query results!')
            sys.exit(-1)
        from feedex_desktop_notifier import DesktopNotifier

        feedex.do_load_icons()
        desktop_notifier = DesktopNotifier(icons=feedex.icons)
        desktop_notifier.clear()
        desktop_notifier.load(feedex.QP.results, params['notify_level'])
        desktop_notifier.show()





        	
if __name__ == '__main__':
    main()


