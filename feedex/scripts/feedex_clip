#!/bin/bash

# Requires: xclip, notify-send, feedex

# Wrapper for adding keywords and annotation from desktop selection
# Wrapper for running selected URL in browser
# Useful for hotkeys

SEL="$(/usr/bin/xclip -o)"



case "$1" in

    'hilight')
        CATEGORY="$2"
        if [[ "$CATEGORY" == "" ]]; then
            CATEGORY="Hilight"
        fi
        WINDOW_NAME="$(/usr/bin/xdotool getwindowfocus getwindowname)"
        # Strip browser header for it not to spoil learning features
        WINDOW_NAME="${WINDOW_NAME//Firefox/}"
        WINDOW_NAME="${WINDOW_NAME//firefox/}"
        WINDOW_NAME="${WINDOW_NAME//Mozilla/}"
        WINDOW_NAME="${WINDOW_NAME//mozilla/}"
        WINDOW_NAME="${WINDOW_NAME//Chrome/}"
        WINDOW_NAME="${WINDOW_NAME//chrome/}"
        NOW="$(/bin/date)"
        NOW_RAW="$(/bin/date +"%s")"

        /usr/bin/feedex --parent_category="$CATEGORY" --learn --add-entry "$WINDOW_NAME" "$SEL"
    ;;

    'browser')
        /usr/bin/feedex -o "$SEL"
    ;;

    'keyword')
        /usr/bin/feedex --weight=10 --add-keyword "$SEL"
    ;;

    *)
    V_HELP="

        Usage: feedex_clip [action]

            This is a handy tool for hotkey shortcuts to set in your desktop interface. Arguments are taken from currently
            highlighted text on the screen as well as current window name.
            
            Actions:
                
                hilight [CATEGORY]    Save currently highlighted selection as entry in CATEGORY and learn features for news rating
                browser                 Open current selection in browser (URL) and change status in database if entry is present
                keyword                Save currently highlighted selection as raw keyword used as a strong rule for news rating



"
    printf "$V_HELP"

    exit
    ;;
esac


if [[ "$?" == "0" ]]; then
    notify-send "Success!"
else
    notify-send --urgency=critical "Error!"
fi