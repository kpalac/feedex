#!/usr/bin/python3
# -*- coding: utf-8 -*-

""" Feedex main executable """

import sys


PLATFORM = sys.platform
if PLATFORM == 'linux': sys.path.append('/usr/share/feedex/feedex')
else: 
    sys.stderr.write(f'Platform {PLATFORM} not supported... Aborting...')
    sys.exit(-3)

from feedex_headers import *










def main():
    """Main class for Feedex feed reader. It parses command line and launches actions with given parameters"""

    action = None
    argument = None
    argument2 = None
    argument3 = None

    params = {'print':True}

    config_file = None
    database_file = None
    log_file = None

    # Command line argument parsing...
    if len(sys.argv) > 1:

        for i, arg in enumerate(sys.argv):

            if i == 0: continue

            if arg in ('-h', '--help', '--usage'):
                help_print(FEEDEX_SHORT_HELP)
                sys.exit(0)
            elif arg in ('-hh', '--help-long'):
                help_print(FEEDEX_LONG_HELP)
                sys.exit(0)
            elif arg == ('--help-feeds'):
                help_print(FEEDEX_HELP_FEEDS)
                sys.exit(0)
            elif arg == ('--help-categories'):
                help_print(FEEDEX_HELP_FEEDS)
                sys.exit(0)
            elif arg == ('--help-entries'):
                help_print(FEEDEX_HELP_ENTRIES)
                sys.exit(0)
            elif arg == ('--help-rules'):
                help_print(FEEDEX_HELP_RULES)
                sys.exit(0)
            elif arg == ('--help-scripting'):
                help_print(FEEDEX_HELP_SCRIPTING)
                sys.exit(0)
                

            elif arg in ('-v', '--version'):
                print(f"{FEEDEX_VERSION}")
                sys.exit(0)

            elif arg in ('--about',):
                help_print(FEEDEX_HELP_ABOUT)
                sys.exit(0)


            # read parameters and actions... uses utilities from feedex_utils.py for clean parsing and sanity checks

            #PARAMETERS
            elif arg.startswith('--config='):
                config_file = sanitize_arg(arg, str, '', stripped=True, is_file=True, exit_fail=True)
                continue
            elif arg.startswith('--log='):
                log_file = sanitize_arg(arg, str, '', stripped=True, exit_fail=False)
                continue
            elif arg.startswith('--database='):
                database_file = sanitize_arg(arg, str, '', stripped=True, exit_fail=True)
                continue
            elif arg == '--debug':
                params['debug'] = 1
                continue
            elif arg.startswith('--debug='):
                params['debug'] = sanitize_arg(arg, int, None, stripped=True, exit_fail=True)
                continue

            #DISPLAY 
            elif arg == '--csv':
                params['output']='csv'
                params['print']=True
                continue
            elif arg == '--json':
                params['output']='json'
                params['print']=True
                continue
            elif arg == '--short':
                params['output']='short'
                params['print']=True

            elif arg == '--headlines':
                params['output']='headlines'
                params['print']=True


            elif arg.startswith('--delimiter='):
                params['delimiter'] = sanitize_arg(arg, str, '|', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--delimiter2='):
                params['delimiter2'] = sanitize_arg(arg, str, ';', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--escape='):
                params['delim_escape'] = sanitize_arg(arg, str, '\\', stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--trunc='):
                params['trunc'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--notify-level='):
                params['notify_level'] = sanitize_arg(arg, int, 2, exit_fail=False)
                continue

            elif arg == '--desktop-notify':
                params['desktop_notify'] = True
                params['print'] = True
                continue

	    #NEWS		
            elif arg in ('-g','--get-news'):
                action = 'get_news'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID', exit_fail=True, allow_none=True)
                break

            elif arg in ('-c','--check'):
                action = 'check'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to check', exit_fail=True, allow_none=True)
                break

            elif arg in ('-o','--open-in-browser'):
                action = 'open'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='entry ID or URL to open in browser', exit_fail=True, allow_none=False)
                break		

            elif arg == '--renotify':
                action = 'renotify'
                break	
				



            #FEEDS
            elif arg in ('-L','--list-feeds'):
                action = 'list_feeds'
                break

            elif arg in ('-a','--add-feed'):
                action = 'add_url'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='feed URL to download', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Handler', exit_fail=False, allow_none=True, valid_list=['rss','twitter'])
                break

            elif arg in ('-u', '--update-feeds'):
                action = 'update_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to update', exit_fail=True, allow_none=True)
                break
			
            elif arg in ('-D','--delete-feed'):
                action = 'del_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to delete', exit_fail=True, allow_none=False)
                break

            elif arg in ('-F','--read-feed'):
                action = 'read_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to browse', exit_fail=True, allow_none=False)
                break	
            elif arg in ('-C','--read-category'):
                action = 'read_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='category to browse', exit_fail=True, allow_none=False)
                break	

            elif arg == '--examine-feed':
                action = 'examine_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-feed':
                action = 'edit_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='New value', exit_fail=True, allow_none=False)
                break
            elif arg == '--insert-feed-before':
                action = 'insert_feed_before'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name='target feed ID', exit_fail=True, allow_none=False)
                break


            #ENTRIES			
            elif arg in ('-r','--read-entry'):
                action = 'read_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='etry ID to read', exit_fail=True, allow_none=False)
                break
            elif arg in ('-S','--find-similar'):
                action = 'find_similar'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='etry ID to analyse', exit_fail=True, allow_none=False)
                break

            elif arg == '--mark':
                action = 'mark'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name='read n times', exit_fail=True, allow_none=False)
                break	

            elif arg == '--mark-unimportant':
                action = 'mark_unimportant'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                break	

            elif arg == '--flag':
                action = 'flag'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='flag name or ID', exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-entry':
                action = 'edit_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='Entry ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='New value', exit_fail=True, allow_none=False)
                break	

                	
            elif arg in ('--add-entry','-N'):
                action='add_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Title', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Text', exit_fail=True, allow_none=True)
                break

            elif arg == '--add-entries-from-file':
                action='add_entries_from_file'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='File with entries', exit_fail=True, allow_none=False)
                break

            elif arg == '--add-entries-from-pipe':
                action='add_entries_from_pipe'
                break



            elif arg == '--delete-entry':
                action = 'del_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to delete', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='additional parameter', exit_fail=True, allow_none=True, valid_list=['rules_only','not_rules'])
                break
	
            # ITEM RESTORES
            elif arg == '--restore-feed':
                action = 'restore_feed'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='feed ID to restore', exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-category':
                action = 'restore_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='category ID to restore', exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-entry':
                action = 'restore_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to restore', exit_fail=True, allow_none=False)
                break


            #QUERIES
            elif arg in ('-q','--query'):
                action = 'query_entries'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, '*', singleton=True, arg_name='query phrase', exit_fail=False, allow_none=True)
                break
			


            #KEYWORDS, HISTORY AND RULES
            elif arg == '--list-rules':
                action = 'list_rules'
                break	

            elif arg == '--list-history':
                action = 'list_history'
                break	
            

            elif arg in ('-K', '--add-keyword'):
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='keyword(s) text', exit_fail=True, allow_none=False)
                action = 'add_keyword'
                break	
            elif arg == '--add-regex':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='REGEX string', exit_fail=True, allow_none=False)
                action = 'add_regex'
                break	
            elif arg == '--add-full-text':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='search query', exit_fail=True, allow_none=False)
                action = 'add_full_text'
                break	
            elif arg == '--add-full-text-exact':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='search query', exit_fail=True, allow_none=False)
                action = 'add_full_text_exact'
                break	
            elif arg == '--edit-rule':
                action = 'edit_rule'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='Rule ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='New value', exit_fail=True, allow_none=False)
                break	

            elif arg == '--delete-rule':
                action = 'del_rule'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='rule ID to delete', exit_fail=True, allow_none=False)
                break	

            elif arg == '--term-net':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='searched term', exit_fail=True, allow_none=False)
                action = 'term_net'
                break	

            elif arg == '--term-context':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='term for context', exit_fail=True, allow_none=False)
                action = 'term_context'
                break	

            elif arg == '--term-in-time':
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='searched term', exit_fail=True, allow_none=False)
                action = 'term_in_time'
                break	

            elif arg == '--rel-in-time':
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=False)
                action = 'rel_in_time'
                break	


            elif arg == '--terms-for-entry':
                action = 'terms_for_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to extract terms from', exit_fail=True, allow_none=False)
                break	

            elif arg == '--rules-for-entry':
                action = 'rules_for_entry'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID to check rules for', exit_fail=True, allow_none=False)
                break	


            #CATEGORIES
            elif arg == '--list-categories':
                action = 'list_categories'
                break
            elif arg == '--show-categories-tree':
                action = 'show_categories_tree'
                break
            elif arg == '--add-category':
                action = 'add_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Category subtitle', exit_fail=False, allow_none=True)
                break
            elif arg == '--delete-category':
                action = 'del_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name or ID', exit_fail=True, allow_none=False)
                break
            elif arg == '--edit-category':
                action = 'edit_category'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Category name or ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='New value', exit_fail=True, allow_none=False)
                break


            #FLAGS
            elif arg == '--list-flags':
                action = 'list_flags'
                break
            elif arg == '--add-flag':
                action = 'add_flag'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Flag name', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Flag description', exit_fail=False, allow_none=True)
                break
            elif arg == '--delete-flag':
                action = 'del_flag'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Flag ID', exit_fail=True, allow_none=False)
                break
            elif arg == '--edit-flag':
                action = 'edit_flag'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Flag ID', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Field name', exit_fail=True, allow_none=False)
                argument3 = sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name='New value', exit_fail=True, allow_none=False)
                break
            



            #MAINTENANCE
            elif arg == '--clear-history':
                action = 'clear_history'
                break
            elif arg == '--delete-query-rules':
                action = 'delete_query_rules'
                break
            elif arg == '--delete-learned-rules':
                action = 'delete_learned_rules'
                break
            elif arg == '--empty-trash':
                action = 'empty_trash'
                break

            elif arg  == '--recalculate':
                action = 'recalculate'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break	
            elif arg == '--rerank':
                action = 'rerank'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break	
            elif arg == '--relearn':
                action = 'relearn'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='entry ID', exit_fail=True, allow_none=True)
                break

            elif arg == '--db-maintenance':
                action = 'db_maintenance'	
                break

            elif arg == '--archive':
                action = 'archive'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='Published date', exit_fail=True, allow_none=False)
                argument2 = sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name='Output DB path', exit_fail=True, allow_none=False)
                break
            elif arg == '--export-feeds':
                action = 'export_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='output file', exit_fail=True, allow_none=False)
                break
            elif arg == '--export-rules':
                action = 'export_rules'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='output file', exit_fail=True, allow_none=False)
                break
            elif arg == '--export-flags':
                action = 'export_flags'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='output file', exit_fail=True, allow_none=False)
                break
            elif arg == '--import-feeds':
                action = 'import_feeds'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='input pickle file', exit_fail=True, allow_none=False)
                break
            elif arg == '--import-rules':
                action = 'import_rules'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='input pickle file', exit_fail=True, allow_none=False)
                break
            elif arg == '--import-flags':
                action = 'import_flags'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='input pickle file', exit_fail=True, allow_none=False)
                break
            
            elif arg == '--test-regexes':
                action = 'test_regexes'
                argument = sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name='Feed ID', exit_fail=True, allow_none=False)
                break

            #DATABASE
            elif arg == '--lock-db':
                action = 'lock'
            elif arg == '--unlock-db':
                action = 'unlock'
            elif arg == '--db-stats':
                action = 'db_stats'
            elif arg.startswith('--timeout='):
                params['timeout'] = sanitize_arg(arg, int, 10, stripped=False, exit_fail=False)
                continue
            elif arg == '--ignore-lock':
                params['ignore_lock'] = True
                continue

            elif arg == '--lock-fetching':
                action = 'lock_fetching'
            elif arg == '--unlock-fetching':
                action = 'unlock_fetching'
				


            #Additional parameter (non-action)
            # Params for adding entries
            elif arg.startswith('--limit='):
                params['limit'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg == '--learn':
                params['learn'] = True
                continue
            elif arg == '--no-learn':
                params['learn'] = False
                continue
            elif arg == '--no-fetch':
                params['no_fetch'] = True
                continue
            elif arg == '--with-rules':
                params['with_rules'] = True
                continue
            elif arg == '--no-read':
                params['no_read'] = True
                continue
            elif arg == '--no-flagged':
                params['no_flag'] = True
                continue
                        
            # Parameters for searching entries et al.
            elif arg.startswith('--lang='):
                params['lang'] = sanitize_arg(arg, str, 'heuristic', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--weight='):
                params['weight'] = sanitize_arg(arg, float, 2, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--handler='):
                params['handler'] = sanitize_arg(arg, str, 'rss', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--field='):
                params['field'] = sanitize_arg(arg, str, None, stripped=True, exit_fail=False)
                continue
	
            elif arg.startswith('--type='):
                params['qtype'] = sanitize_arg(arg, str, 'full', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--from='):
                params['date_from'] = sanitize_arg(arg, str, '1899-12-31', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--to='):
                params['date_to'] = sanitize_arg(arg, str, '2100-01-01', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--added_from='):
                params['date_add_from'] = sanitize_arg(arg, str, '1899-12-31', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--added_to='):
                params['date_add_to'] = sanitize_arg(arg, str, '2100-01-01', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--feed='):
                params['feed'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--category='):
                params['category'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--parent_category='):
                params['parent_category'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--parent_id='):
                params['parent_id'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--feed_id='):
                params['feed_id'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--handler='):
                params['handler'] = sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--importance='):
                params['importance'] = sanitize_arg(arg, float, 1, stripped=False, exit_fail=False)
                continue


            elif arg == '--case_ins':
                params['case_ins'] = True
                continue
            elif arg == '--case_sens':
                params['case_sens'] = True
                continue


            elif arg == '--last':
                params['last']=True
                continue

            elif arg.startswith('--last_n='):
                params['last_n'] = sanitize_arg(arg, int, 1, stripped=False, exit_fail=False)
                continue

            elif arg == '--today':
                params['today']=True
                continue

            elif arg == '--last_week':
                params['last_week']=True
                continue
            elif arg == '--last_month':
                params['last_month']=True
                continue
            elif arg == '--last_quarter':
                params['last_quarter']=True
                continue
            elif arg == '--last_six_months':
                params['last_six_months']=True
                continue
            elif arg == '--last_year':
                params['last_year']=True
                continue
            elif arg == '--last_hour':
                params['last_hour']=True
                continue

            elif arg == '--read':
                params['read']=True
                continue

            elif arg == '--unread':
                params['unread']=True
                continue
            elif arg.startswith('--flag='):
                params['flag'] = sanitize_arg(arg, str, 'all', stripped=False, exit_fail=False)
                continue

            elif arg == '--deleted':
                params['deleted']=True
                continue

            elif arg == '--rev':
                params['rev']=True
                continue

            elif arg.startswith('--sort='):
                params['sort'] = "+" + sanitize_arg(arg, str, None, exit_fail=True)
                continue
            elif arg.startswith('--rsort='):
                params['sort'] = "-" + sanitize_arg(arg, str, None, exit_fail=True)
                continue


            #Term Display gimmicks
            elif arg == '--plot':
                params['plot']=True
                continue

            elif arg.startswith('--group='):
                params['group'] = sanitize_arg(arg, str, 0, exit_fail=True, valid_list=['hourly','daily','monthly','category','feed','flag'])
                continue

            elif arg.startswith('--depth='):
                params['depth'] = sanitize_arg(arg, int, 0, exit_fail=True)
                continue


            elif arg.startswith('--term-width='):
                params['term_width'] = sanitize_arg(arg, int, 150, exit_fail=False)
                continue


            elif arg in ('--gui','--GUI'):
                action = 'GUI'
                break

            elif arg in ('--sql'):
                action = 'execute_SQL'
                argument = sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='SQL statement', exit_fail=True, allow_none=False)
                break

            else:
                cli_msg( (-1,"Invalid arguments given...\nMake sure that:\n - parameters are before actions\n - every parameter and action is available\n" ) )
                sys.exit(9)
                    
        
    else:
        # If no args are given - run GUI (not supported(yet?) :)
        action="GUI"





    # Config stuff...
    if config_file is not None:
        if not os.path.isfile(config_file):
            cli_msg( (-1,f'Configuration file %a not found!', config_file ) )
            config_file = os.getenv('FEEDEX_CONFIG', FEEDEX_CONFIG)
            cli_msg( (-1,f'Defaulting to %a', config_file) )
    else:
        config_file = os.getenv('FEEDEX_CONFIG', FEEDEX_CONFIG)

    if not os.path.isfile(config_file):
        copyfile( FEEDEX_SYS_CONFIG, FEEDEX_CONFIG )
    
    config = parse_config(config_file)
    if config == -1: config = DEFAULT_CONFIG
    config = validate_config(config)

    # Get paths to DB and log from env if provided
    if database_file is None: database_file = os.getenv('FEEDEX_DB_PATH', None)
    if log_file is None: log_file = os.getenv('FEEDEX_LOG', None)
 
    if database_file is not None: config['db_path'] = database_file
    if log_file is not None: config['log'] = log_file
 

    # Check if required user paths are present and if not - create them	
    check_paths((FEEDEX_SHARED_PATH, FEEDEX_ICON_PATH, FEEDEX_CACHE_PATH, ))

    # Overwrite config options if given as command line arguments
    params['config'] = config

    
    # Init main data container for shared structures
    FEEDEX_main_container = FeedexMainDataContainer(config=config)

    # Lazy load and run GUInterface
    if action == 'GUI':

        # GUI display ... 
        params['print'] = False
        from feedex_gui_main import feedex_run_main_win, FeedexMainWin
        feedex_run_main_win(FEEDEX_main_container, **params)
        return 0



    # Init the main workhorse ...
    params['single_run'] = True
    params['main_thread'] = True
    feedex = Feeder(FEEDEX_main_container, **params)
    if feedex.db_status != 0: sys.exit(2)

    # Execute actions specified on the command line. Looks a bit convoluted, but it is not that complicated, really
    # All of the following are described in long help

    if action == 'get_news':
        feedex.fetch(id=argument, force=True, ignore_interval=True)
        if feedex.new_items > 0: feedex.QP.notify(**params)

    elif action == 'check':
        feedex.fetch(id=argument, force=False, ignore_interval=False)
        if feedex.new_items > 0: feedex.QP.notify(**params)

    elif action == 'open':
        if argument.isdigit(): entry = EntryContainer(feedex, id=argument)
        else: entry = EntryContainer(feedex, url=argument)
        entry.open(background=False)

    elif action == 'renotify': feedex.QP.notify(**params)
        

    elif action == 'list_feeds':
        feedex.QP.list_feeds()
    elif action == 'add_url':
        feed = FeedContainer(feedex)
        params['url'] = argument
        feed.add_from_url(new=params, no_fetch=params.get('no_fetch',False))
    elif action == 'update_feeds':
        feedex.fetch(id=argument, force=True, ignore_interval=True, update_only=True)
    elif action == 'del_feed':
        feed = FeedContainer(feedex, feed_id=argument)
        feed.delete()
    elif action == 'edit_feed':
        feed = FeedContainer(feedex, feed_id=argument)
        idict = {argument2 : argument3}
        # Prompt for auth data
        if argument2 == 'auth' and argument3 not in ('NONE','NULL'):
            from getpass import getpass
            idict['domain'] = nullif( input("Enter domain for authentication (NONE for empty): "), '')
            idict['login'] = nullif( input("Enter login: "), '')
            idict['passwd'] = nullif( getpass(prompt="Enter password: "), '')

        feed.update(idict)

    elif action == 'insert_feed_before':
        feed = FeedContainer(feedex, feed_id=argument)
        feed.order_insert(argument2, with_cat=False)

    elif action == 'read_feed':
        params['feed'] = argument
        params['columns'] = RESULTS_SHORT_PRINT2
        feedex.QP.query('*', params, rank=False, cnt=False, snippets=False)
    elif action == 'read_category':
        params['category'] = argument
        params['columns'] = RESULTS_SHORT_PRINT2
        feedex.QP.query('*', params, rank=False, cnt=False, snippets=False)
    elif action == 'examine_feed':
        feedex.QP.read_feed(argument)

		
    elif action == 'read_entry':
        feedex.QP.read_entry(argument)
    elif action == 'find_similar':
        feedex.QP.find_similar(argument, **params)
    elif action == 'mark':
        entry = EntryContainer(feedex, id=argument)
        entry.update({'read': argument2})
    elif action == 'mark_unimportant':
        entry = EntryContainer(feedex, id=argument)
        entry.update({'read': -1})
    elif action == 'flag':
        entry = EntryContainer(feedex, id=argument)
        entry.update({'flag': argument2})
    elif action == 'edit_entry':
        entry = EntryContainer(feedex, id=argument)
        entry.update({argument2: argument3})
    elif action == 'add_entry':
        entry = EntryContainer(feedex)
        params['title'] = argument
        params['desc'] = argument2
        entry.add(new=params)
    elif action == 'del_entry':
        entry = EntryContainer(feedex, id=argument)
        entry.delete()

    elif action == 'add_entries_from_file': feedex.add_entries(efile=argument, learn=params.get('learn',True))
    elif action == 'add_entries_from_pipe': feedex.add_entries(pipe=True, learn=params.get('learn',True))

    elif action == 'query_entries': feedex.QP.query(argument, params, rank=True, snippets=True, allow_group=True)
        
    elif action == 'list_rules': feedex.QP.show_rules()

    elif action == 'list_history': feedex.QP.show_history()

    elif action == 'add_keyword':
        rule = RuleContainer(feedex)
        params['string'] = argument
        params['type'] = 0
        rule.add(new=params)
    elif action == 'add_regex':
        rule = RuleContainer(feedex)
        params['string'] = argument
        params['type'] = 3
        rule.add(new=params)
    elif action == 'add_full_text':
        rule = RuleContainer(feedex)
        params['string'] = argument
        params['type'] = 1
        rule.add(new=params)
    elif action == 'add_full_text_exact':
        rule = RuleContainer(feedex)
        params['string'] = argument
        params['type'] = 2
        rule.add(new=params)

    elif action == 'edit_rule':
        rule = RuleContainer(feedex, id=argument)
        rule.update({argument2: argument3})
    elif action == 'del_rule':
        rule = RuleContainer(feedex, id=argument)
        rule.delete()


    elif action == 'term_net':
        feedex.QP.term_net(argument, **params)
    elif action == 'term_in_time':
        feedex.QP.term_in_time(argument, **params)
    elif action == 'rel_in_time':
        feedex.QP.relevance_in_time(argument, **params)
    elif action == 'term_context':
        feedex.QP.term_context(argument, **params)
    elif action == 'terms_for_entry':
        feedex.QP.terms_for_entry(argument)
    elif action == 'rules_for_entry':
        feedex.QP.rules_for_entry(argument)

    elif action == 'list_categories':
        feedex.QP.list_feeds(cats=True)
    elif action == 'show_categories_tree':
        feedex.QP.cat_tree_print()
    elif action == 'add_category':
        feed = FeedContainer(feedex)
        feed.add(new={'title':argument, 'name': argument, 'subtitle':argument2, 'is_category':True})
    elif action == 'del_category':
        feed = FeedContainer(feedex, category_id=argument)
        feed.delete()
    elif action == 'edit_category':
        feed = FeedContainer(feedex, category_id=argument)
        feed.update({argument2: argument3})

    elif action == 'list_flags':
        feedex.QP.list_flags()
    elif action == 'add_flag':
        flag = FlagContainer(feedex)
        flag.add(new={'name':argument, 'desc': argument2})
    elif action == 'del_flag':
        flag = FlagContainer(feedex, id=argument)
        flag.delete()
    elif action == 'edit_flag':
        flag = FlagContainer(feedex, id=argument)
        flag.update({argument2: argument3})


    elif action == 'restore_feed':
        feed = FeedContainer(feedex, feed_id=argument)
        feed.update({'deleted': 0})
    elif action == 'restore_category':
        feed = FeedContainer(feedex, category_id=argument)
        feed.update({'deleted': 0})
    elif action == 'restore_entry':
        entry = EntryContainer(feedex, id=argument)
        entry.update({'deleted': 0})

    elif action == 'clear_history':
        feedex.clear_history()
    elif action == 'delete_query_rules':
        feedex.delete_query_rules()
    elif action == 'delete_learned_rules':
        feedex.delete_learned_rules()
    elif action == 'empty_trash':
        feedex.empty_trash()
        

    elif action == 'recalculate':
        feedex.recalculate(id=argument, stats=True, rank=False, learn=False)

    elif action == 'rerank':
        feedex.recalculate(id=argument, rank=True, learn=False, stats=False)

    elif action == 'relearn':
        feedex.recalculate(id=argument, rank=False, learn=True, stats=False)

    elif action == 'db_maintenance':
        feedex.db_maintenance()

    elif action == 'archive':
        feedex.archive(argument, argument2, with_rules=params.get('with_rules',False))
        
    elif action == 'test_regexes':
        feedex.QP.test_regexes(argument)

    elif action == 'export_feeds':
        feedex.port_data(True, argument, 'feeds')
    elif action == 'import_feeds':
        feedex.port_data(False, argument, 'feeds')
    elif action == 'export_rules':
        feedex.port_data(True, argument, 'rules')
    elif action == 'import_rules':
        feedex.port_data(False, argument, 'rules')
    elif action == 'export_flags':
        feedex.port_data(True, argument, 'flags')
    elif action == 'import_flags':
        feedex.port_data(False, argument, 'flags')
    


    elif action == 'unlock':
        feedex.unlock(verbose=True)
    elif action == 'lock':
        feedex.lock(verbose=True)
    elif action == 'db_stats':
        feedex.db_stats()		
 
    elif action == 'unlock_fetching':
        feedex.unlock_fetching(verbose=True)
    elif action == 'lock_fetching':
        feedex.lock_fetching(force=True, verbose=True)
 
    elif action == 'execute_SQL' and params.get('debug') is not None:
        print('Executing SQL statement...')
        feedex.curs.execute(argument)
        feedex.conn.commit()
        print('Done.')


    # Desktop notifications, lazy load etc.
    if params.get('desktop_notify',False) and action in ('get_news','check','renotify','query'):
        if params.get('notify_level',2) != 2 and action == 'query':
            os.stderr.write('Summary and Flag-only notifications cannot be performed from query results - use it for fetching news')
            sys.exit(2)
        from feedex_desktop_notifier import DesktopNotifier

        feedex.do_load_icons()
        desktop_notifier = DesktopNotifier(icons=feedex.MC.icons)
        desktop_notifier.clear()
        desktop_notifier.load(feedex.QP.results, params['notify_level'], total_number=feedex.QP.total_result_number)
        desktop_notifier.show()


    feedex.close()
    if feedex.db_error is not None: sys.exit(2)
    sys.exit( abs(FEEDEX_main_container.ret_status) )



        	
if __name__ == '__main__':
    main()


