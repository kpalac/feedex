#!/usr/bin/python3
# -*- coding: utf-8 -*-

""" Feedex main executable """

import sys

PLATFORM = sys.platform
if PLATFORM == 'linux': sys.path.append('/usr/share/feedex/feedex')
else: 
    sys.stderr.write(f'Platform {PLATFORM} not supported... Aborting...')
    sys.exit(1)

from feedex_headers import *









def main():
 
    action = None
    argument = None
    argument2 = None
    argument3 = None

    params = {}
    fdx.cli = True
    fdx.single_run = True

    config_file = os.getenv('FEEDEX_CONFIG', None)
    database = os.getenv('FEEDEX_DB_PATH', None)
    log_file = os.getenv('FEEDEX_LOG', None)

    query = False
    cli_display = False

    # Command line argument parsing...
    if len(sys.argv) > 1:

        for i, arg in enumerate(sys.argv):

            if i == 0: continue

            if arg in ('-h', '--help', '--usage'):
                from feedex_docs import FEEDEX_SHORT_HELP
                mu_print(FEEDEX_SHORT_HELP)
                return 0
            elif arg in ('-hh', '--help-long'):
                from feedex_docs import FEEDEX_LONG_HELP
                mu_print(FEEDEX_LONG_HELP)
                return 0
            elif arg == ('--help-feeds'):
                from feedex_docs import FEEDEX_HELP_FEEDS
                mu_print(FEEDEX_HELP_FEEDS)
                return 0
            elif arg == ('--help-query'):
                from feedex_docs import FEEDEX_HELP_QUERY
                mu_print(FEEDEX_HELP_QUERY)
                return 0
            elif arg == ('--help-categories'):
                from feedex_docs import FEEDEX_HELP_FEEDS
                mu_print(FEEDEX_HELP_FEEDS)
                return 0
            elif arg == ('--help-entries'):
                from feedex_docs import FEEDEX_HELP_ENTRIES
                mu_print(FEEDEX_HELP_ENTRIES)
                return 0
            elif arg == ('--help-rules'):
                from feedex_docs import FEEDEX_HELP_RULES
                mu_print(FEEDEX_HELP_RULES)
                return 0
            elif arg == ('--help-scripting'):
                from feedex_docs import FEEDEX_HELP_SCRIPTING, FEEDEX_HELP_JSON_QUERY
                mu_print(FEEDEX_HELP_SCRIPTING)
                mu_print(FEEDEX_HELP_JSON_QUERY)
                return 0
            elif arg == ('--help-examples'):
                from feedex_docs import FEEDEX_HELP_EXAMPLES
                mu_print(FEEDEX_HELP_EXAMPLES)
                return 0
                

            elif arg in ('-v', '--version'):
                print(f"{FEEDEX_VERSION}")
                return 0

            elif arg in ('--about',):
                mu_print(FEEDEX_HELP_ABOUT)
                return 0


            # read parameters and actions... uses utilities from feedex_utils.py for clean parsing and sanity checks

            #PARAMETERS
            elif arg.startswith('--config='):
                config_file = fdx.sanitize_arg(arg, str, '', stripped=True, is_file=True, exit_fail=True)
                continue
            elif arg.startswith('--log='):
                log_file = fdx.sanitize_arg(arg, str, '', stripped=True, exit_fail=False)
                continue
            elif arg.startswith('--database='):
                database = fdx.sanitize_arg(arg, str, '', stripped=True, exit_fail=True)
                continue
            elif arg == '--debug':
                fdx.debug_level = 1
                continue
            elif arg.startswith('--debug='):
                fdx.debug_level = fdx.sanitize_arg(arg, int, None, stripped=True, exit_fail=True)
                continue

            #DISPLAY 
            elif arg == '--csv':
                params['output']='csv'
                continue
            elif arg == '--json':
                params['output']='json'
                continue
            elif arg == '--export':
                params['output']='json_dict'
                continue
            elif arg == '--long':
                params['output']='long'
                continue
            elif arg == '--headlines':
                params['output']='headlines'
                continue

            elif arg.startswith('--display-cols='):
                params['display_cols'] = fdx.sanitize_arg(arg, str, '', stripped=False, exit_fail=False)
                continue
            
            elif arg.startswith('--ofile='):
                params['ofile'] = fdx.sanitize_arg(arg, str, '', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--export='):
                params['output']='json_dict'                
                params['ofile'] = fdx.sanitize_arg(arg, str, '', stripped=False, exit_fail=False)
                continue


            elif arg == '--silent':
                fdx.cli=False

            elif arg == '--clipboard':
                params['clipboard'] = True

            elif arg.startswith('--delimiter='):
                params['delimiter'] = fdx.sanitize_arg(arg, str, '|', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--delimiter2='):
                params['delimiter2'] = fdx.sanitize_arg(arg, str, ';', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--escape='):
                params['delim_escape'] = fdx.sanitize_arg(arg, str, '\\', stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--note_marker='):
                params['note_marker'] = fdx.sanitize_arg(arg, str, '', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--read_marker='):
                params['read_marker'] = fdx.sanitize_arg(arg, str, '', stripped=False, exit_fail=False)
                continue


            elif arg.startswith('--bold_beg='):
                params['bold_beg'] = fdx.sanitize_arg(arg, str, '<b>', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--bold_end='):
                params['bold_end'] = fdx.sanitize_arg(arg, str, '</b>', stripped=False, exit_fail=False)
                continue


            elif arg.startswith('--trunc='):
                params['trunc'] = fdx.sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue

            elif arg == '--desktop-notify':
                params['desktop_notify'] = True
                query = True
                fdx.cli = False

                continue

	        #NEWS		
            elif arg in ('-g','--get-news'):
                action = 'get_news'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID'), exit_fail=True, allow_none=True)
                break

            elif arg in ('-c','--check'):
                action = 'check'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID to check'), exit_fail=True, allow_none=True)
                break

            elif arg in ('-o','--open-in-browser'):
                action = 'open'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('entry ID or URL to open in browser'), exit_fail=True, allow_none=False)
                break		



            #FEEDS
            elif arg in ('-L','--list-feeds'):
                action = 'list_feeds'
                query = True
                break

            elif arg == '--list-feeds-cats':
                action = 'list_feeds_cats'
                query = True
                break

            elif arg in ('-a','--add-feed'):
                action = 'add_url'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('feed URL to download'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Handler'), exit_fail=False, allow_none=True, valid_list=['rss','twitter'])
                break

            elif arg in ('-u', '--update-feeds'):
                action = 'update_feeds'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID to update'), exit_fail=True, allow_none=True)
                break
			
            elif arg in ('-D','--delete-feed'):
                action = 'del_feed'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID to delete'), exit_fail=True, allow_none=False)
                break

            elif arg in ('-F','--read-feed'):
                action = 'read_feed'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID to browse'), exit_fail=True, allow_none=False)
                break	
            elif arg in ('-C','--read-category'):
                action = 'read_category'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('category to browse'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--examine-feed':
                action = 'examine_feed'
                cli_display = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-feed':
                action = 'edit_feed'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Field name'), exit_fail=True, allow_none=False)
                argument3 = fdx.sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name=_('New value'), exit_fail=True, allow_none=False)
                break
            elif arg == '--insert-feed-before':
                action = 'insert_feed_before'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name=_('target feed ID'), exit_fail=True, allow_none=False)
                break

            elif arg == '--test-regexes':
                action = 'test_regexes'
                cli_display = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('Feed ID'), exit_fail=True, allow_none=False)
                break


            #ENTRIES			
            elif arg in ('-r','--read-entry'):
                action = 'read_entry'
                cli_display = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID to read'), exit_fail=True, allow_none=False)
                break
            elif arg in ('-S','--find-similar'):
                action = 'find_similar'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID to analyze'), exit_fail=True, allow_none=False)
                break

            elif arg == '--mark':
                action = 'mark'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), int, None, singleton=True, arg_name=_('read n times'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--mark-unimportant':
                action = 'mark_unimportant'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--flag':
                action = 'flag'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('flag name or ID'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--edit-entry':
                action = 'edit_entry'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Field name'), exit_fail=True, allow_none=False)
                argument3 = fdx.sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name=_('New value'), exit_fail=True, allow_none=False)
                break	

                	
            elif arg in ('--add-entry','-N'):
                action='add_entry'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Title'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Text'), exit_fail=True, allow_none=True)
                break

            elif arg == '--import-entries-from-file':
                action='import_entries_from_file'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('JSON file with entries'), exit_fail=True, allow_none=False)
                break

            elif arg == '--import-entries-from-pipe':
                action='import_entries_from_pipe'
                break

            elif arg == '--delete-entry':
                action = 'del_entry'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID to delete'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('additional parameter'), exit_fail=True, allow_none=True, valid_list=['rules_only','not_rules'])
                break
	
            # ITEM RESTORES
            elif arg == '--restore-feed':
                action = 'restore_feed'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('feed ID to restore'), exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-category':
                action = 'restore_category'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('category ID to restore'), exit_fail=True, allow_none=False)
                break
            elif arg == '--restore-entry':
                action = 'restore_entry'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID to restore'), exit_fail=True, allow_none=False)
                break


            #QUERIES
            elif arg in ('-q','--query'):
                action = 'query_entries'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, '', singleton=True, arg_name=_('query phrase'), exit_fail=False, allow_none=True)
                if argument is None: argument = ''
                break
			


            #KEYWORDS, HISTORY AND RULES
            elif arg == '--list-rules':
                action = 'list_rules'
                query = True
                break
            elif arg == '--list-rules-learned':
                action = 'list_rules_learned'
                query = True
                break

            elif arg == '--list-history':
                action = 'list_history'
                query = True
                break	
            

            elif arg == '--add-rule':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('keyword(s) text'), exit_fail=True, allow_none=False)
                action = 'add_rule'
                break	
            elif arg == '--add-regex':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('REGEX string'), exit_fail=True, allow_none=False)
                action = 'add_regex'
                break	
            elif arg == '--add-stemmed':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('stemmed token string'), exit_fail=True, allow_none=False)
                action = 'add_stemmed'
                break	

            elif arg == '--edit-rule':
                action = 'edit_rule'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('rule ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Field name'), exit_fail=True, allow_none=False)
                argument3 = fdx.sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name=_('New value'), exit_fail=True, allow_none=False)
                break	

            elif arg == '--delete-rule':
                action = 'del_rule'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('rule ID to delete'), exit_fail=True, allow_none=False)
                break	


            elif arg == '--term-net':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('searched term'), exit_fail=True, allow_none=False)
                action = 'term_net'
                query = True
                break	

            elif arg == '--context':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('term for context'), exit_fail=True, allow_none=False)
                action = 'context'
                query = True
                break	

            elif arg == '--term-in-time':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('searched term'), exit_fail=True, allow_none=False)
                action = 'term_in_time'
                query = True
                break	

            elif arg == '--trends':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('searched phrase'), exit_fail=False, allow_none=True)
                action = 'trends'
                query = True
                break	
            
            elif arg == '--trending':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('searched phrase'), exit_fail=False, allow_none=True)
                action = 'trending'
                query = True
                break	

            elif arg == '--rel-in-time':
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID'), exit_fail=True, allow_none=False)
                action = 'rel_in_time'
                query = True
                break	

            elif arg == '--entry-rank':
                action = 'entry_rank'
                cli_display = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), int, None, singleton=True, arg_name=_('entry ID to check rules for'), exit_fail=True, allow_none=False)
                break	


            #CATEGORIES
            elif arg == '--list-categories':
                action = 'list_categories'
                query = True
                break
            elif arg == '--add-category':
                action = 'add_category'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Category name'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Category subtitle'), exit_fail=False, allow_none=True)
                break
            elif arg == '--delete-category':
                action = 'del_category'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Category name or ID'), exit_fail=True, allow_none=False)
                break
            elif arg == '--edit-category':
                action = 'edit_category'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Category name or ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Field name'), exit_fail=True, allow_none=False)
                argument3 = fdx.sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name=_('New value'), exit_fail=True, allow_none=False)
                break


            #FLAGS
            elif arg == '--list-flags':
                action = 'list_flags'
                query = True
                break
            elif arg == '--add-flag':
                action = 'add_flag'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Flag name'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Flag description'), exit_fail=False, allow_none=True)
                break
            elif arg == '--delete-flag':
                action = 'del_flag'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Flag ID'), exit_fail=True, allow_none=False)
                break
            elif arg == '--edit-flag':
                action = 'edit_flag'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('Flag ID'), exit_fail=True, allow_none=False)
                argument2 = fdx.sanitize_arg(slist(sys.argv, i+2, None), str, None, singleton=True, arg_name=_('Field name'), exit_fail=True, allow_none=False)
                argument3 = fdx.sanitize_arg(slist(sys.argv, i+3, None), str, None, singleton=True, arg_name=_('New value'), exit_fail=True, allow_none=False)
                break
            



            #MAINTENANCE
            elif arg == '--clear-history':
                action = 'clear_history'
                break
            elif arg == '--delete-query-rules':
                action = 'delete_query_rules'
                break
            elif arg == '--delete-learned-rules':
                action = 'delete_learned_rules'
                break
            elif arg == '--empty-trash':
                action = 'empty_trash'
                break

            elif arg  == '--reindex':
                action = 'reindex'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('entry ID/range'), exit_fail=True, allow_none=True)
                break	
            elif arg == '--rerank':
                action = 'rerank'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('entry ID/range'), exit_fail=True, allow_none=True)
                break	
            elif arg == '--relearn':
                action = 'relearn'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('entry ID/range'), exit_fail=True, allow_none=True)
                break

            elif arg.startswith('--batch-size='):
                params['batch_size'] = fdx.sanitize_arg(arg, int, 1000, stripped=True, exit_fail=False)
                continue



            # Data transfer
            elif arg == '--import-feeds':
                action = 'import_feeds'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('input JSON file'), exit_fail=True, allow_none=False)
                break
            elif arg == '--import-rules':
                action = 'import_rules'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('input JSON file'), exit_fail=True, allow_none=False)
                break
            elif arg == '--import-flags':
                action = 'import_flags'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('input JSON file'), exit_fail=True, allow_none=False)
                break

            elif arg == '--export-feeds':
                action = 'export_feeds'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('output JSON file'), exit_fail=True, allow_none=False)
                break
            elif arg == '--export-rules':
                action = 'export_rules'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('output JSON file'), exit_fail=True, allow_none=False)
                break
            elif arg == '--export-flags':
                action = 'export_flags'
                query = True
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('output JSON file'), exit_fail=True, allow_none=False)
                break



            elif arg == '--download-catalog':
                action = 'download_catalog'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('output dir'), exit_fail=True, allow_none=False)
                break

            elif arg in ('-qc', '--query-catalog'):
                action = 'query_catalog'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('search phrase'), exit_fail=True, allow_none=True)
                break

            elif arg == '--import-from-catalog':
                action = 'import_from_catalog'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name=_('id list'), exit_fail=True, allow_none=False)
                break


            #DATABASE
            elif arg == '--create-db':
                action = 'create_db'
                break
            
            elif arg == '--defaults':
                params['defaults'] = True
                continue
            elif arg == '--default-feeds':
                params['default_feeds'] = True
                continue

            elif arg == '--db-maintenance':
                action = 'db_maintenance'	
                break

            elif arg == '--lock-db':
                action = 'lock'
            elif arg == '--unlock-db':
                action = 'unlock'
            elif arg == '--db-stats':
                action = 'db_stats'
                cli_display = True
            elif arg.startswith('--timeout='):
                params['timeout'] = sanitize_arg(arg, int, 60, stripped=False, exit_fail=False)
                continue
            elif arg == '--ignore-lock':
                params['ignore_lock'] = True
                continue

            elif arg == '--lock-fetching':
                action = 'lock_fetching'
            elif arg == '--unlock-fetching':
                action = 'unlock_fetching'
				


            #Additional parameter (non-action)
            # Params for adding entries
            elif arg.startswith('--limit='):
                params['limit'] = sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg == '--learn':
                params['learn'] = True
                continue
            elif arg == '--no-learn':
                params['learn'] = False
                continue
            elif arg == '--no-fetch':
                params['no_fetch'] = True
                continue

                        
            # Parameters for searching entries et al.
            elif arg  == '--json_query':
                params['json_query'] = True
                continue

            elif arg.startswith('--lang='):
                params['lang'] = fdx.sanitize_arg(arg, str, 'heuristic', stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--weight='):
                params['weight'] = fdx.sanitize_arg(arg, float, 2, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--handler='):
                params['handler'] = fdx.sanitize_arg(arg, str, 'rss', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--field='):
                params['field'] = fdx.sanitize_arg(arg, str, None, stripped=True, exit_fail=False)
                continue
	
            elif arg.startswith('--type='):
                params['qtype'] = fdx.sanitize_arg(arg, str, 'fts', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--logic='):
                params['logic'] = fdx.sanitize_arg(arg, str, 'any', stripped=True, exit_fail=False)
                continue


            elif arg.startswith('--from='):
                params['date_from'] = fdx.sanitize_arg(arg, str, '1899-12-31', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--to='):
                params['date_to'] = fdx.sanitize_arg(arg, str, '2100-01-01', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--added_from='):
                params['date_add_from'] = fdx.sanitize_arg(arg, str, '1899-12-31', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--added_to='):
                params['date_add_to'] = fdx.sanitize_arg(arg, str, '2100-01-01', stripped=True, exit_fail=False)
                continue

            elif arg.startswith('--feed='):
                params['feed'] = fdx.sanitize_arg(arg, int, 0, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--category='):
                params['category'] = fdx.sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--parent_category='):
                params['parent_category'] = fdx.sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--parent_id='):
                params['parent_id'] = fdx.sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--feed_id='):
                params['feed_id'] = fdx.sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue

            elif arg.startswith('--handler='):
                params['handler'] = fdx.sanitize_arg(arg, str, None, stripped=False, exit_fail=False)
                continue


            elif arg == '--note':
                params['note'] = 1
                continue
            elif arg == '--news':
                params['note'] = 0
                continue


            elif arg == '--case_ins':
                params['case_ins'] = True
                continue
            elif arg == '--case_sens':
                params['case_sens'] = True
                continue


            elif arg == '--last':
                params['last']=True
                continue

            elif arg.startswith('--last_n='):
                params['last_n'] = fdx.sanitize_arg(arg, int, 1, stripped=False, exit_fail=False)
                continue

            elif arg == '--today':
                params['today']=True
                continue

            elif arg == '--last_week':
                params['last_week']=True
                continue
            elif arg == '--last_month':
                params['last_month']=True
                continue
            elif arg == '--last_quarter':
                params['last_quarter']=True
                continue
            elif arg == '--last_six_months':
                params['last_six_months']=True
                continue
            elif arg == '--last_year':
                params['last_year']=True
                continue
            elif arg == '--last_hour':
                params['last_hour']=True
                continue

            elif arg == '--read':
                params['read']=True
                continue
            elif arg == '--unread':
                params['unread']=True
                continue
            
            elif arg.startswith('--flag='):
                params['flag'] = fdx.sanitize_arg(arg, str, 'all', stripped=False, exit_fail=False)
                continue

            elif arg == '--deleted':
                params['deleted']=True
                continue

            elif arg == '--rev':
                params['rev']=True
                continue

            elif arg.startswith('--sort='):
                params['sort'] = fdx.sanitize_arg(arg, str, None, exit_fail=True)
                continue

            elif arg.startswith('--page='):
                params['page'] = fdx.sanitize_arg(arg, int, 1, stripped=False, exit_fail=False)
                continue
            elif arg.startswith('--page_len='):
                params['page_len'] = fdx.sanitize_arg(arg, int, -1, stripped=False, exit_fail=False)
                continue

        

            #Term Display gimmicks
            elif arg == '--plot':
                params['plot']=True
                continue

            elif arg.startswith('--group='):
                params['group'] = fdx.sanitize_arg(arg, str, 0, exit_fail=True, valid_list=['hourly','daily','monthly','category','feed','flag','similar'])
                continue

            elif arg.startswith('--depth='):
                params['depth'] = fdx.sanitize_arg(arg, int, 0, exit_fail=True)
                continue

            elif arg.startswith('--summarize='):
                params['summarize'] = fdx.sanitize_arg(arg, int, 0, exit_fail=True)
                continue


            elif arg.startswith('--term-width='):
                params['term_width'] = fdx.sanitize_arg(arg, int, 150, exit_fail=False)
                continue


            elif arg in ('--gui','--GUI'):
                action = 'GUI'
                break

            elif arg in ('--sql'):
                action = 'execute_SQL'
                argument = fdx.sanitize_arg(slist(sys.argv, i+1, None), str, None, singleton=True, arg_name='SQL statement', exit_fail=True, allow_none=False)
                break

            elif arg == '--test':
                action = 'test'
                break

            else:
                return msg(FX_ERROR_CL,_("""Invalid arguments given...
Make sure that:
 - parameters are before actions
 - every parameter and action is available
 
 """) )
                    
        
    else:
        # If no args are given - run GUI (not supported(yet?) :)
        action="GUI"





    # Config stuff...
    config_file = coalesce(config_file, FEEDEX_CONFIG)
    if not os.path.isfile(config_file): 
        msg(_('Config file not found. Using default...'))
        copyfile( FEEDEX_SYS_CONFIG, FEEDEX_CONFIG )
        config_file = FEEDEX_CONFIG

    fdx.parse_config(config_file)

    fdx.config['log'] = coalesce(log_file, fdx.config.get('log'), os.path.join(FEEDEX_SHARED_PATH, 'feedex.log') )
    fdx.config['db_path'] = coalesce(database, fdx.config.get('db_path'), os.path.join(FEEDEX_SHARED_PATH, 'feedex.db') )
    fdx.config['use_keyword_learning'] = coalesce(params.get('learn'), fdx.config.get('use_keyword_learning'), True)
    fdx.config['timeout'] = coalesce(params.get('timeout'), fdx.config.get('timeout'), 0)

    # Validate configuration
    if action == 'GUI': fdx.validate_config(load=True, strict=False)
    else: 
        err = fdx.validate_config(load=True, strict=True)
        if err != 0: return msg(*err)

    # Install locale
    if fdx.config.get('lang') not in (None,'en'):
        lang = gettext.translation('feedex', languages=[fdx.config.get('lang')])
        lang.install(FEEDEX_LOCALE_PATH)

    # Check and create needed dirs
    check_paths((FEEDEX_SHARED_PATH,))

    # Lazy load and run GUInterface
    if action == 'GUI':

        # GUI display ... 
        if fdx.debug_level in (None,0): fdx.cli = False
        fdx.single_run = False
        
        from feedex_gui_main import feedex_run_main_win, FeedexMainWin
        feedex_run_main_win(**params)
        return 0


    # Create database if specified
    if action == 'create_db':
        feedex = FeedexDatabase(db_path=fdx.config['db_path'], config=fdx.config, allow_create=True, **params)
        try: feedex.connect(defaults=params.get('defaults',False), default_feeds=params.get('default_feeds', False))
        except (FeedexDatabaseError, FeedexDataError,) as e: return e.code

        if not feedex.created: msg(_('Database %a already exists...'), fdx.config['db_path'])
        return 0

    # Building catalog (dev)
    if action == 'download_catalog':
        catalog = FeedexCatalog()
        err = catalog.build_catalog(odir=argument)
        return err

    # Searching feed catalog
    elif action == 'query_catalog':
        Q = FeedexCatalogQuery()
        err = Q.query(argument, {'field':params.get('field'), 'category':params.get('category')})
        feedex_cli = FeedexCLI(**params)
        if err == 0: feedex_cli.out_table(Q)
        return err


    # Init the main workhorse ...
    feedex = FeedexDatabase(db_path=fdx.config['db_path'], config=fdx.config, allow_create=False, **params)
    try: feedex.connect(defaults=False, default_feeds=False)
    except (FeedexDatabaseError, FeedexDataError,) as e: return e.code
    except (FeedexDatabaseNotFoundError,) as e:
        return msg(e.code, _('Use feedex --database=[PATH_TO_DB] [--defaults, --default-feeds] --create-db to create new Database'))


    # Lazy load desktop notification support
    if params.get('desktop_notify',False) and action in ('get_news','check','query_entries','add_entry','add_rule','add_regex','add_stemmed',):

        from feedex_desktop_notifier import DesktopNotifier
        feedex.load_icons()
        desktop_notifier = DesktopNotifier(icons=fdx.icons_cache)

    # Lazy load clipboard support. Substitute arguments with clipboard selection
    if params.get('clipboard',False) and ('add_entry','add_rule','add_regex','add_full_text',):
            
        from feedex_clipper import FeedexClipper
        feedex.load_icons()
        clipper = FeedexClipper(config=fdx.config)

        argument, argument2 = clipper.process_args(argument, argument2)

        if clipper.error is not None:
            if params.get('desktop_notify',False): desktop_notifier.notify(clipper.error, None, -1)
            return FX_ERROR


    # Init query object
    if query: 
        feedex.connect_QP()
    if query or cli_display:
        feedex_cli = FeedexCLI(**params)
        if params.get('desktop_notify',False): feedex_cli.connect_DN(desktop_notifier)


    # Wrapper for notifications
    def do_notify():
        if feedex.new_items > 0:
            if params.get('desktop_notify', False): 
                params['last'] = True
                err = feedex.Q.query('', params, rank=True, snippets=False, allow_group=True)
                if err == 0: feedex_cli.out_table(feedex.Q)

    # Check if query input is a JSON string and parse it
    if params.get('json_query',False) and action in ('query_entries', 'term_net', 'term_in_time', 'context', 'find_similar', 'trends', 'trending', 'rel_in_time'):
        argument, filters = feedex.Q.parse_json_query(argument)
        if argument == -1: action = None
        # Replace relevant keys for parameters
        for k,v in filters.items():
            if k != 'phrase': params[k] = v








    # Execute actions specified on the command line. Looks a bit convoluted, but it is not that complicated, really
    # All of the following are described in long help

    if action == 'get_news':
        feedex.fetch(id=argument, force=True, ignore_interval=True)
        do_notify()

    elif action == 'check':
        feedex.fetch(id=argument, force=False, ignore_interval=False)
        do_notify()

    elif action == 'open':
        if argument.isdigit(): entry = FeedexEntry(feedex, id=argument)
        else: entry = FeedexEntry(feedex, url=argument)
        entry.open(background=False)

        

    elif action == 'list_feeds':
        err = feedex.Q.list_feeds(feeds_only=True)
        if err == 0: feedex_cli.out_table(feedex.Q)

    elif action == 'add_url':
        feed = FeedexFeed(feedex)
        params['url'] = argument

        if params.get('desktop_notify',False): desktop_notifier.notify(_("Adding Channel from URL ..."), 0)
        err = feed.add_from_url(new=params, no_fetch=params.get('no_fetch',False))

        if params.get('desktop_notify',False):
            if clipper.error is None and err == 0: desktop_notifier.notify(_("Channel successfully added!"), None, feed.vals.get('id',-2))
            else: desktop_notifier.notify(_("Error adding new Channel!"), None, -1)


    elif action == 'update_feeds':
        feedex.fetch(id=argument, force=True, ignore_interval=True, update_only=True)
    elif action == 'del_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        feed.delete()
    elif action == 'edit_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        idict = {argument2 : argument3}
        # Prompt for auth data
        if argument2 == 'auth' and argument3 not in ('NONE','NULL'):
            from getpass import getpass
            idict['domain'] = nullif( input(_("Enter domain for authentication (NONE for empty): ")), '')
            idict['login'] = nullif( input(_("Enter login: ")), '')
            idict['passwd'] = nullif( getpass(prompt=_("Enter password: ")), '')

        feed.update(idict)

    elif action == 'insert_feed_before':
        feed = FeedexFeed(feedex, feed_id=argument)
        feed.order_insert(argument2, with_cat=False)

    elif action == 'read_feed':
        params['feed'] = argument
        params['fallback_sort'] = 'pubdate'
        err = feedex.Q.query('', params, rank=False, cnt=False, snippets=False)
        if err == 0: feedex_cli.out_table(feedex.Q)

    elif action == 'read_category':
        params['category'] = argument
        params['fallback_sort'] = 'pubdate'
        err = feedex.Q.query('', params, rank=False, cnt=False, snippets=False)
        if err == 0: feedex_cli.out_table(feedex.Q)
    
    elif action == 'examine_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        feedex_cli.out_feed(feed)
    
    elif action == 'test_regexes':
        feed = FeedexFeed(feedex, feed_id=argument)
        feedex_cli.out_test_regex(feed)

		
    elif action == 'read_entry':
        entry = FeedexEntry(feedex, id=argument)
        feedex_cli.out_entry(entry, **params)

    elif action == 'find_similar':
        err = feedex.Q.find_similar(argument, **params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'mark':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'read': argument2})
    elif action == 'mark_unimportant':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'read': -1})
    elif action == 'flag':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'flag': argument2})
    elif action == 'edit_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({argument2: argument3})
    elif action == 'add_entry':
        entry = FeedexEntry(feedex)
        params['title'] = argument
        params['desc'] = argument2
        if params.get('weight') is not None: params['read'] = scast(params.get('weight'), int, 0)

        if params.get('desktop_notify',False): desktop_notifier.notify(_("Adding new Entry..."), None, 0)

        entry.add(new=params)

        if params.get('desktop_notify',False):
            if clipper.error is None and fdx.ret_status == 0: desktop_notifier.notify(_("Entry successfully added!"), None, entry.vals.get('feed_id',-2))
            else: desktop_notifier.notify(_("Error adding new entry!"), None, -1)

    elif action == 'del_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.delete()



    # Main query
    elif action == 'query_entries': 
        err = feedex.Q.query(argument, params, json_file=params.get('json_file'), rank=True, snippets=True, allow_group=True)
        if err == 0: feedex_cli.out_table(feedex.Q)



    elif action == 'list_rules': 
        err = feedex.Q.list_rules()
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'list_rules_learned':
        if feedex_cli.output in ('cli',None): feedex_cli.output = 'headlines'
        err = feedex.Q.list_rules(learned=True)
        if err == 0: feedex_cli.out_table(feedex.Q)


    elif action == 'list_history': 
        err = feedex.Q.list_history()
        if err == 0: feedex_cli.out_table(feedex.Q)

    elif action == 'add_rule':
        rule = FeedexRule(feedex)
        params['string'] = argument
        params['type'] = 0
        if params.get('desktop_notify',False): desktop_notifier.notify(_("Adding new Rule..."), None, 0)
        rule.add(new=params)
        if params.get('desktop_notify',False):
            if clipper.error is None and feedex.MC.ret_status == 0: desktop_notifier.notify(_("Rule successfully added!"), None, -2)
            else: desktop_notifier.notify(_("Error adding new Rule!"), None, -1)

    elif action == 'add_regex':
        rule = FeedexRule(feedex)
        params['string'] = argument
        params['type'] = 2
        if params.get('desktop_notify',False): desktop_notifier.notify(_("Adding new REGEX Rule..."), None, 0)
        rule.add(new=params)
        if params.get('desktop_notify',False):
            if clipper.error is None and feedex.MC.ret_status == 0: desktop_notifier.notify(_("REGEX successfully added!"), None, -2)
            else: desktop_notifier.notify(_("Error adding new REGEX!"), None, -1)

    elif action == 'add_stemmed':
        rule = FeedexRule(feedex)
        params['string'] = argument
        params['type'] = 1
        if params.get('desktop_notify',False): desktop_notifier.notify(_("Adding new Stemmed Rule..."), None, 0)
        rule.add(new=params)
        if params.get('desktop_notify',False):
            if clipper.error is None and feedex.MC.ret_status == 0: desktop_notifier.notify(_("Stemmed Rule successfully added!"), None, -2)
            else: desktop_notifier.notify(_("Error adding new Stemmed Rule!"), None, -1)




    elif action == 'edit_rule':
        rule = FeedexRule(feedex, id=argument)
        rule.update({argument2: argument3})
    elif action == 'del_rule':
        rule = FeedexRule(feedex, id=argument)
        rule.delete()


    elif action == 'term_net':
        err = feedex.Q.term_net(argument, **params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'term_in_time':
        err = feedex.Q.term_in_time(argument, **params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'rel_in_time':
        err = feedex.Q.relevance_in_time(argument, **params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'context':
        err = feedex.Q.term_context(argument, **params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'trends':
        err = feedex.Q.get_trends(argument, params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'trending':
        err = feedex.Q.get_trending(argument, params)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'entry_rank':
        entry = FeedexEntry(feedex, id=argument)
        feedex_cli.out_entry_ranking(entry)

    elif action == 'list_categories':
        if feedex_cli.output in ('cli',None): feedex_cli.output = 'notes'
        err = feedex.Q.list_feeds(cats_only=True)
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'list_feeds_cats':
        if feedex_cli.output in ('cli',None): feedex_cli.output = 'headlines'
        err = feedex.Q.feed_tree()
        if err == 0: feedex_cli.out_table(feedex.Q)    
    elif action == 'add_category':
        feed = FeedexFeed(feedex)
        feed.add(new={'title':argument, 'name': argument, 'subtitle':argument2, 'is_category':True})
    elif action == 'del_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.delete()
    elif action == 'edit_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.update({argument2: argument3})

    elif action == 'list_flags':
        err = feedex.Q.list_flags()
        if err == 0: feedex_cli.out_table(feedex.Q)
    elif action == 'add_flag':
        flag = FeedexFlag(feedex)
        flag.add(new={'name':argument, 'desc': argument2})
    elif action == 'del_flag':
        flag = FeedexFlag(feedex, id=argument)
        flag.delete()
    elif action == 'edit_flag':
        flag = FeedexFlag(feedex, id=argument)
        flag.update({argument2: argument3})


    elif action == 'restore_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        feed.update({'deleted': 0})
    elif action == 'restore_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.update({'deleted': 0})
    elif action == 'restore_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'deleted': 0})

    elif action == 'clear_history': feedex.clear_history()
    elif action == 'delete_query_rules': feedex.delete_query_rules()
    elif action == 'delete_learned_rules': feedex.delete_learned_rules()
    elif action == 'empty_trash': feedex.empty_trash()
        


    elif action in ('reindex','rerank','relearn'):
        # Parse argument for ID or id ranges for mass recalculating        
        start_id = None
        end_id = None
        if type(argument) is str and '-' in argument:
            argl = argument.split('-')
            start_id = scast( slist(argl,0, None), int, None)
            end_id = scast( slist(argl,1, None), int, None)
            if start_id is None and end_id is None:
                sys.stderr.write(_("Could not resolve id range! Should be in format: NN-NN"))
                return FX_ERROR_CL
        else:
            argument = scast(argument, int, None)


        if action == 'reindex': feedex.recalculate(id=argument, batch_size=params.get('batch_size'), start_id=start_id, end_id=end_id, index=True, rank=False, learn=False)
        elif action == 'rerank': feedex.recalculate(id=argument, batch_size=params.get('batch_size'), start_id=start_id, end_id=end_id, rank=True, learn=False, index=False)
        elif action == 'relearn': feedex.recalculate(id=argument, batch_size=params.get('batch_size'), start_id=start_id, end_id=end_id, rank=False, learn=True, index=False)




    elif action == 'export_feeds':
        feedex.Q.list_feeds(all=True)
        feedex_cli.output = 'json_dict'
        feedex_cli.ofile = argument
        feedex_cli.out_table(feedex.Q)

    elif action == 'export_rules':
        feedex.Q.list_rules()
        feedex_cli.output = 'json_dict'
        feedex_cli.ofile = argument
        feedex_cli.out_table(feedex.Q)

    elif action == 'export_flags':
        feedex.Q.list_flags()
        feedex_cli.output = 'json_dict'
        feedex_cli.ofile = argument
        feedex_cli.out_table(feedex.Q)


    elif action == 'import_entries_from_file': feedex.import_entries(efile=argument, learn=params.get('learn',True))
    elif action == 'import_entries_from_pipe': feedex.import_entries(pipe=True, learn=params.get('learn',True))

    elif action == 'import_feeds': feedex.import_feeds(argument)
    elif action == 'import_rules': feedex.import_rules(argument)
    elif action == 'import_flags': feedex.import_flags(argument)
    

    elif action == 'import_from_catalog':
        catalog = FeedexCatalog(db=feedex)
        catalog.prep_import(argument)
        if catalog.queue_len > 0: catalog.do_import()

    elif action == 'unlock':
        if feedex.unlock() == 0: msg(_('Database unlocked.'))
    elif action == 'lock': 
        if feedex.lock() == 0: msg(_('Database locked.'))
    elif action == 'unlock_fetching': 
        if feedex.unlock_fetching() == 0: msg(_('Database unlocked for fetching.'))
    elif action == 'lock_fetching': 
        if feedex.lock_fetching(force=True) == 0: msg(_('Database locked for fetching.'))

    elif action == 'db_maintenance': feedex.maintenance()

    elif action == 'db_stats': feedex_cli.out_db_stats(feedex.stats())


    elif action == 'execute_SQL' and fdx.debug_level not in (None, 0):
        print(_('Executing SQL statement...'))
        feedex.curs.execute(argument)
        feedex.conn.commit()
        print(_('Done.'))



    elif action == 'test' and fdx.debug_level not in (None,0):
        pass



    # Formalities...
    feedex.close()

    return fdx.ret_status



        	



if __name__ == '__main__':
    ret_status = main() 
    sys.exit(abs(ret_status))


