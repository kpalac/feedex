#!/usr/bin/python3
# -*- coding: utf-8 -*-

""" Feedex main executable """

import sys

PLATFORM = sys.platform
if PLATFORM == 'linux': sys.path.append('/usr/share/feedex/feedex')

elif PLATFORM == 'win32': 
    
    import os
    sys.path.append( os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), 'feedex') )

else: 
    sys.stderr.write(f'Platform {PLATFORM} not supported... Aborting...')
    sys.exit(1)

from feedex_headers import *












def main():
 
    # Main action and arguments
    action, argument, argument2, argument3 = None, None, None, None
    # Main flags for import control
    query, clipboard, desktop, none_str = False, False, False, '<NONE>'
    # Parameters
    params = {}
    
    fdx.cli = True
    fdx.single_run = True

    config_file = os.getenv('FEEDEX_CONFIG', None)
    database = os.getenv('FEEDEX_DB_PATH', None)
    log_file = os.getenv('FEEDEX_LOG', None)

    # Command line argument parsing...
    if len(sys.argv) > 1:

        for i, arg in enumerate(sys.argv):

            if i == 0: continue

            if arg in ('-h', '--help', '--usage'):
                from feedex_docs import FEEDEX_SHORT_HELP
                mu_print(FEEDEX_SHORT_HELP)
                return 0
            elif arg in ('-hh', '--help-long'):
                from feedex_docs import FEEDEX_LONG_HELP
                mu_print(FEEDEX_LONG_HELP)
                return 0
            elif arg == ('--help-feeds'):
                from feedex_docs import FEEDEX_HELP_FEEDS
                mu_print(FEEDEX_HELP_FEEDS)
                return 0
            elif arg == ('--help-query'):
                from feedex_docs import FEEDEX_HELP_QUERY
                mu_print(FEEDEX_HELP_QUERY)
                return 0
            elif arg == ('--help-categories'):
                from feedex_docs import FEEDEX_HELP_FEEDS
                mu_print(FEEDEX_HELP_FEEDS)
                return 0
            elif arg == ('--help-entries'):
                from feedex_docs import FEEDEX_HELP_ENTRIES
                mu_print(FEEDEX_HELP_ENTRIES)
                return 0
            elif arg == ('--help-rules'):
                from feedex_docs import FEEDEX_HELP_RULES
                mu_print(FEEDEX_HELP_RULES)
                return 0
            elif arg == ('--help-scripting'):
                from feedex_docs import FEEDEX_HELP_SCRIPTING, FEEDEX_HELP_JSON_QUERY
                mu_print(FEEDEX_HELP_SCRIPTING)
                mu_print(FEEDEX_HELP_JSON_QUERY)
                return 0
            elif arg == ('--help-examples'):
                from feedex_docs import FEEDEX_HELP_EXAMPLES
                mu_print(FEEDEX_HELP_EXAMPLES)
                return 0
                

            elif arg in ('-v', '--version'):
                print(f"{FEEDEX_VERSION}")
                return 0

            elif arg in ('--about',):
                mu_print(FEEDEX_HELP_ABOUT)
                return 0


            # read parameters and actions... uses utilities from feedex_utils.py for clean parsing and sanity checks

            #PARAMETERS
            elif arg.startswith('--config='): config_file = fdx.get_par(arg)
            elif arg.startswith('--log='): log_file = fdx.get_par(arg)
            elif arg.startswith('--database='): database = fdx.get_par(arg)

            elif arg == '--debug': fdx.debug_level = 1
            elif arg.startswith('--debug='): fdx.debug_level = abs(scast(fdx.get_par(arg), int, 0))

            #DISPLAY 
            elif arg == '--csv':        params['output']='csv'
            elif arg == '--json':       params['output']='json'
            elif arg == '--export':     params['output']='json_dict'
            elif arg == '--long':       params['output']='long'
            elif arg == '--headlines':  params['output']='headlines'

            elif arg.startswith('--display-cols='): params['display_cols'] = fdx.get_par(arg)
            
            elif arg.startswith('--ofile='): params['ofile'] = fdx.get_par(arg)
            elif arg.startswith('--export='):
                params['output']='json_dict'                
                params['ofile'] = fdx.get_par(arg)


            elif arg == '--silent': fdx.cli=False

            elif arg == '--clipboard': clipboard = True

            elif arg.startswith('--delimiter='):    params['delimiter'] = fdx.get_par(arg)
            elif arg.startswith('--delimiter2='):   params['delimiter2'] = fdx.get_par(arg)
            elif arg.startswith('--escape='):       params['delim_escape'] = fdx.get_par(arg)

            elif arg.startswith('--note_marker='):  params['note_marker'] = fdx.get_par(arg)
            elif arg.startswith('--read_marker='):  params['read_marker'] = fdx.get_par(arg)

            elif arg.startswith('--none='):  none_str = fdx.get_par(arg)

            elif arg.startswith('--bold_beg='):     params['bold_beg'] = fdx.get_par(arg)
            elif arg.startswith('--bold_end='):     params['bold_end'] = fdx.get_par(arg)

            elif arg.startswith('--trunc='):        params['trunc'] = fdx.get_par(arg)

            elif arg == '--desktop': params['output'], desktop = 'desktop', True
    


	        #NEWS		
            elif arg in ('-g','--get-news'):        action, argument = 'get_news', slist(sys.argv, i+1, None)
            elif arg in ('-c','--check'):           action, argument = 'check', slist(sys.argv, i+1, None)
            elif arg in ('-o','--open-in-browser'): action, argument = 'open', slist(sys.argv, i+1, None) 

            #QUERIES
            elif arg in ('-q','--query'):           action, argument, query = 'query', slist(sys.argv, i+1, None), True
            elif arg in ('-S','--find-similar'):    action, argument, query = 'similar', slist(sys.argv, i+1, None), True
            elif arg == '--trending':               action, argument, query = 'trending', slist(sys.argv, i+1, None), True
            elif arg in ('-R', '--recommend',):     action, query = 'recom', True

            elif arg == '--term-net':       action, argument, query = 'term_net', slist(sys.argv, i+1, None), True
            elif arg == '--context':        action, argument, query = 'context', slist(sys.argv, i+1, None), True
            elif arg == '--time-series':    action, argument, query = 'time_series', slist(sys.argv, i+1, None), True
            elif arg == '--trends':         action, argument, query = 'trends', slist(sys.argv, i+1, None), True
            elif arg == '--rel-in-time':    action, argument, query = 'rel_in_time', slist(sys.argv, i+1, None), True

            elif arg in ('-F','--read-feed'):       action, argument, query = 'read_feed', slist(sys.argv, i+1, None), True
            elif arg in ('-C','--read-category'):   action, argument, query = 'read_category', slist(sys.argv, i+1, None), True


            # META QUERIES 
            elif arg == '--list-feeds-cats':    action, query = 'list_feeds_cats', True
            elif arg == '--list-categories':    action, query = 'list_categories', True
            elif arg in ('-L','--list-feeds'):  action, query = 'list_feeds', True

            elif arg == '--list-rules':         action, query = 'list_rules', True
            elif arg == '--list-flags':         action, query = 'list_flags', True
            elif arg == '--list-learned-terms': action, query = 'list_learned_terms', True

            elif arg == '--list-history':       action, query = 'list_history', True
            elif arg == '--list-fetches':       action, query = 'list_fetches', True




            #CATEGORIES
            elif arg == '--add-category': action, argument, argument2 = 'add_category', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)
            elif arg == '--delete-category': action, argument = 'del_category', slist(sys.argv, i+1, None)
            elif arg == '--edit-category': action, argument, argument2, argument3 = 'edit_category', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None), slist(sys.argv, i+3, None)
            elif arg == '--restore-category': action, argument = 'restore_category', slist(sys.argv, i+1, None)


            #FEEDS
            elif arg in ('-u', '--update-feeds'): action, argument = 'update_feeds', slist(sys.argv, i+1, None)

            elif arg in ('-a','--add-feed'): action, argument = 'add_url', slist(sys.argv, i+1, None)
            elif arg == '--edit-feed': action, argument, argument2, argument3 = 'edit_feed', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None), slist(sys.argv, i+3, None)
            elif arg in ('-D','--delete-feed'): action, argument = 'del_feed', slist(sys.argv, i+1, None)
            elif arg == '--restore-feed': action, argument = 'restore_feed', slist(sys.argv, i+1, None)

            elif arg == '--examine-feed': action, argument = 'examine_feed', slist(sys.argv, i+1, None)
            elif arg == '--test-regexes': action, argument = 'test_regexes', slist(sys.argv, i+1, None)


            #ENTRIES			
            elif arg in ('-r','--read-entry'): action, argument = 'read_entry', slist(sys.argv, i+1, None)
            
            elif arg == '--mark': action, argument, argument2 = 'mark', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)
            elif arg == '--unmark': action, argument, argument2 = 'mark', slist(sys.argv, i+1, None), 0
            elif arg == '--flag': action, argument, argument2 = 'flag', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)
            elif arg == '--edit-entry': action, argument, argument2, argument3 = 'edit_entry', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None), slist(sys.argv, i+3, None)

            elif arg in ('--add-entry','-N'): action, argument, argument2 = 'add_entry', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)
            elif arg == '--delete-entry': action, argument = 'del_entry', slist(sys.argv, i+1, None)
            elif arg == '--restore-entry': action, argument = 'restore_entry', slist(sys.argv, i+1, None)
                
            elif arg == '--import-entries-from-file': action, argument = 'import_entries_from_file', slist(sys.argv, i+1, None)
            elif arg == '--import-entries-from-pipe': action = 'import_entries_from_pipe'


            #RULES
            elif arg == '--add-rule': action, argument = 'add_rule', slist(sys.argv, i+1, None)
            elif arg == '--add-regex': action, argument = 'add_regex', slist(sys.argv, i+1, None)
            elif arg == '--add-stemmed': action, argument = 'add_stemmed', slist(sys.argv, i+1, None)

            elif arg == '--edit-rule': action, argument, argument2, argument3 = 'edit_rule', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None), slist(sys.argv, i+3, None)
            elif arg == '--delete-rule': action, argument = 'del_rule', slist(sys.argv, i+1, None)


            #FLAGS
            elif arg == '--add-flag': action, argument, argument2 = 'add_flag', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)
            elif arg == '--edit-flag': action, argument, argument2, argument3 = 'edit_flag', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None), slist(sys.argv, i+3, None)
            elif arg == '--delete-flag': action, argument = 'del_flag', slist(sys.argv, i+1, None)
            

            #MAINTENANCE
            elif arg == '--clear-history': action = 'clear_history'
            elif arg == '--delete-query-rules': action = 'delete_query_rules'
            elif arg == '--delete-learned-terms': action = 'delete_learned_terms'
            elif arg == '--empty-trash': action = 'empty_trash'

            elif arg  == '--reindex': action, argument = 'reindex', slist(sys.argv, i+1, None)
            elif arg == '--rerank': action, argument = 'rerank', slist(sys.argv, i+1, None)
            elif arg == '--relearn': action, argument = 'relearn', slist(sys.argv, i+1, None)

            elif arg.startswith('--batch-size='): params['batch_size'] = fdx.get_par(arg, cast=int, default=1500)

            # DATA TRANSFER
            elif arg == '--import-feeds': action, argument = 'import_feeds', slist(sys.argv, i+1, None)
            elif arg == '--import-rules': action, argument = 'import_rules', slist(sys.argv, i+1, None)
            elif arg == '--import-flags': action, argument = 'import_flags', slist(sys.argv, i+1, None)

            elif arg == '--export-feeds': action, argument, query = 'export_feeds', slist(sys.argv, i+1, None), True
            elif arg == '--export-rules': action, argument, query = 'export_rules', slist(sys.argv, i+1, None), True
            elif arg == '--export-flags': action, argument, query = 'export_flags', slist(sys.argv, i+1, None), True

            # FEED CATALOG 
            elif arg == '--download-catalog': action, argument = 'download_catalog', slist(sys.argv, i+1, None)
            elif arg in ('-qc', '--query-catalog'): action, argument = 'query_catalog', slist(sys.argv, i+1, None)
            elif arg == '--import-from-catalog': action, argument = 'import_from_catalog', slist(sys.argv, i+1, None)

            #DATABASE
            elif arg == '--create-db': action = 'create_db'
            elif arg == '--defaults': params['defaults'] = True
            elif arg == '--default-feeds': params['default_feeds'] = True

            elif arg == '--db-maintenance': action = 'db_maintenance'	

            elif arg == '--lock-db': action = 'lock'
            elif arg == '--unlock-db': action = 'unlock'

            elif arg == '--db-stats': action = 'db_stats'
            

            #Additional parameter (non-action)
            # Params for adding entries
            elif arg.startswith('--timeout='): params['timeout'] = fdx.get_par(arg)

            elif arg.startswith('--limit='): params['limit'] = fdx.get_par(arg)

            elif arg == '--learn': params['learn'] = True
            elif arg == '--no-learn': params['learn'] = False

            elif arg == '--no-fetch': params['no_fetch'] = True
                        
            # Parameters for searching entries et al.
            elif arg  == '--json_query': params['json_query'] = True

            elif arg.startswith('--lang='): params['lang'] = fdx.get_par(arg)
            elif arg.startswith('--weight='): params['weight'] = fdx.get_par(arg)
            elif arg.startswith('--handler='): params['handler'] = fdx.get_par(arg)
            elif arg.startswith('--field='): params['field'] = fdx.get_par(arg)
            elif arg.startswith('--type='): params['qtype'] = fdx.get_par(arg)
            elif arg.startswith('--logic='): params['logic'] = fdx.get_par(arg)

            elif arg.startswith('--from='): params['date_from'] = fdx.get_par(arg)
            elif arg.startswith('--to='): params['date_to'] = fdx.get_par(arg)

            elif arg.startswith('--added_from='): params['date_add_from'] = fdx.get_par(arg)
            elif arg.startswith('--added_to='): params['date_add_to'] = fdx.get_par(arg)

            elif arg.startswith('--feed='): params['feed'] = fdx.get_par(arg)
            elif arg.startswith('--category='): params['cat'] = fdx.get_par(arg)
            elif arg.startswith('--category_id='): params['cat_id'] = fdx.get_par(arg)
            elif arg.startswith('--parent_id='): params['parent_id'] = fdx.get_par(arg)

            elif arg.startswith('--location='): params['location'] = fdx.get_par(arg)

            elif arg == '--note': params['note'] = 1
            elif arg == '--news': params['note'] = 0
    
            elif arg == '--case_ins': params['case_ins'] = True
            elif arg == '--case_sens': params['case_sens'], params['case_insensitive'] = True, 0

            elif arg == '--last': params['last'] = True
            elif arg.startswith('--last_n='): params['last_n'] = fdx.get_par(arg)
            elif arg == '--today': params['today']=True
            elif arg == '--last_week': params['last_week']=True
            elif arg == '--last_month': params['last_month']=True
            elif arg == '--last_quarter': params['last_quarter']=True
            elif arg == '--last_six_months': params['last_six_months']=True
            elif arg == '--last_year': params['last_year']=True
            elif arg == '--last_hour': params['last_hour']=True

            elif arg == '--read': params['read']=True
            elif arg == '--unread': params['unread']=True
            
            elif arg.startswith('--flag='): params['flag'] = fdx.get_par(arg)
            elif arg.startswith('--flag_id='): params['flag_id'] = fdx.get_par(arg)

            elif arg == '--deleted': params['deleted']=True

            elif arg == '--rev': params['rev']=True

            elif arg.startswith('--sort='): params['sort'] = fdx.get_par(arg)
            
            elif arg.startswith('--page='): params['page'] = fdx.get_par(arg)
            elif arg.startswith('--page_len='): params['page_len'] = fdx.get_par(arg)

            elif arg == '--plot': params['plot']=True
            elif arg.startswith('--term-width='): params['term_width'] = fdx.get_par(arg)

            elif arg.startswith('--group='): params['group'] = fdx.get_par(arg)
            elif arg.startswith('--depth='): params['depth'] = fdx.get_par(arg)
            
            elif arg.startswith('--summarize='): params['summarize'] = fdx.get_par(arg)
            elif arg == '--details': params['details'] = True


            elif arg == '--gui-add-entry': action, argument, argument2 = 'gui_add_entry', slist(sys.argv, i+1, None), slist(sys.argv, i+2, None)


            elif arg in ('--gui','--GUI'): action = 'gui'

            elif arg in ('--sql'): action, argument = 'execute_SQL', slist(sys.argv, i+1, None)
            elif arg in ('--sql-script'): action, argument = 'execute_file_SQL', slist(sys.argv, i+1, None)

            elif arg == '--test': action = 'test'

            else: fdx.cli_param_error = True

            if action is not None: break
                            
    else:
        # If no args are given - run GUI (not supported(yet?) :)
        action="gui"


    if fdx.cli_param_error: return msg(FX_ERROR_CL,_("""Invalid arguments given...
Make sure that:
 - parameters are before actions
 - every parameter and action is correct
 
 """) )




    # Config stuff...
    config_file = coalesce(config_file, FEEDEX_CONFIG)
    if not os.path.isfile(config_file): 
        msg(_('Config file %a not found. Using default...'), config_file)
        copyfile( FEEDEX_SYS_CONFIG, FEEDEX_CONFIG )
        config_file = FEEDEX_CONFIG

    fdx.config = FeedexConfig(file=config_file)
    fdx.config.parse()

    fdx.config['log'] = coalesce(log_file, fdx.config.get('log'), os.path.join(FEEDEX_SHARED_PATH, 'feedex.log') )
    fdx.config['db_path'] = coalesce(database, fdx.config.get('db_path'), os.path.join(FEEDEX_SHARED_PATH, 'feedex.db') )
    fdx.config['use_keyword_learning'] = coalesce(params.get('learn'), fdx.config.get('use_keyword_learning'), True)
    fdx.config['timeout'] = coalesce(params.get('timeout'), fdx.config.get('timeout'), 0)

    # Validate configuration
    if action in ('gui', 'gui_add_entry',): fdx.config.validate(default=True)
    else:
        err = fdx.config.validate(default=False)
        if err != 0: return msg(*err)

    # Install locale
    if fdx.config.get('lang') not in (None,'en'):
        lang = gettext.translation('feedex', languages=[fdx.config.get('lang')])
        lang.install(FEEDEX_LOCALE_PATH)

    # Check and create needed dirs
    check_paths((FEEDEX_SHARED_PATH,))



    if clipboard: 
        fdx.connect_CLPR()
        argument, argument2, argument3 = fdx.CLPR.process_args(scast(argument, str, ''), scast(argument2, str, ''), scast(argument3, str, ''))


    # Lazy load and run GUInterface
    if action == 'gui':

        # GUI display ... 
        if fdx.debug_level in (None,0): fdx.cli = False
        fdx.single_run = False
        
        from feedex_gui_main import feedex_run_main_win, FeedexMainWin
        feedex_run_main_win(**params)
        return 0


    elif desktop and action in ('add_entry', 'add_url',    'add_rule', 'add_regex', 'add_stemmed',):
        
        if fdx.debug_level in (None,0): fdx.cli = False
        fdx.single_run = True

        from feedex_gui_main import feedex_run_aux_win

        if action == 'add_entry': 
            ent = FX_ENT_ENTRY
            params['title'], params['desc'] = argument, argument2

        elif action == 'add_url': 
            ent = FX_ENT_FEED
            params['url'] = argument


        elif action == 'add_rule':
            ent = FX_ENT_RULE
            params['string'] = denull(argument, none_str)
            params['type'] = 0            

        elif action == 'add_stemmed':
            ent = FX_ENT_RULE
            params['string'] = denull(argument, none_str)
            params['type'] = 1            

        elif action == 'add_regex':
            ent = FX_ENT_RULE
            params['string'] = denull(argument, none_str)
            params['type'] = 2            

        return feedex_run_aux_win(ent, params)


    

    # Wrapper for printing tables and entities
    def cprint(ent, **kargs):
        fdx.connect_CLP(**params)
        fdx.CLP.cprint(ent)
    

    # Create database if specified
    if action == 'create_db':
        feedex = FeedexDatabase(db_path=fdx.config['db_path'], config=fdx.config, allow_create=True, main_conn=True, **params)
        try: feedex.connect(defaults=params.get('defaults',False), default_feeds=params.get('default_feeds', False))
        except (FeedexDatabaseError, FeedexDataError,) as e: return e.code

        if not feedex.created:
            msg(_('Database %a already exists...'), fdx.config['db_path'])
            feedex.close()
        return 0

    # Building catalog (dev)
    if action == 'download_catalog':
        catalog = FeedexCatalog()
        err = catalog.build_catalog(odir=argument)
        return err

    # Searching feed catalog
    elif action == 'query_catalog':
        Q = FeedexCatalogQuery()
        err = Q.query(argument, {'field':params.get('field'), 'category':params.get('cat')})
        if err == 0: cprint(Q)
        return err



    # Init the main workhorse ...
    feedex = FeedexDatabase(db_path=fdx.config.get('db_path'), config=fdx.config, allow_create=False, main_conn=True, **params)
    try: 
        if action == 'unlock': 
            feedex.connect(unlock=True)
            return 0
        elif action == 'lock': 
            feedex.connect(lock=True)
            return 0
        else: feedex.connect()

    except FeedexDatabaseLockedError as e:
        return e.code
    except (FeedexDatabaseNotFoundError,) as e:
        return msg(e.code, _('Use feedex --database=[PATH_TO_DB] [--defaults, --default-feeds] --create-db to create new Database'))
    except (FeedexDatabaseError, FeedexDataError,) as e: return e.code



    # Init query object
    if query: feedex.connect_QP()

    # Wrappers for notifications
    def new_notify():
        if feedex.new_items > 0 and params.get('output') in ('desktop', 'headlines',):
            params['last'] = True
            feedex.connect_QP()
            err = feedex.Q.query('', params, rank=True, snippets=False, allow_group=True)
            if err == 0: cprint(feedex.Q)

    # Check if query input is a JSON string and parse it
    if params.get('json_query',False) and query:
        argument, filters = feedex.Q.parse_json_query(argument)
        if argument == -1: action = None
        # Replace relevant keys for parameters
        for k,v in filters.items():
            if k != 'phrase': params[k] = v







    # Execute actions specified on the command line. Looks a bit convoluted, but it is not that complicated, really
    # All of the following are described in long help

    if action == 'get_news':
        feedex.fetch(id=argument, force=True, ignore_interval=True)
        new_notify()

    elif action == 'check':
        feedex.fetch(id=argument, force=False, ignore_interval=False)
        new_notify()

    elif action == 'open':
        if argument.isdigit(): entry = FeedexEntry(feedex, id=argument)
        else: entry = FeedexEntry(feedex, url=argument)
        entry.open(background=False)

        

    elif action == 'list_feeds':
        err = feedex.Q.list_feeds(feeds_only=True)
        if err == 0: cprint(feedex.Q)

    elif action == 'add_url':
        feed = FeedexFeed(feedex)
        params['url'] = argument
        feed.add_from_url(params, no_fetch=params.get('no_fetch',False))

    elif action == 'update_feeds':
        feedex.fetch(id=argument, force=True, ignore_interval=True, update_only=True)

    elif action == 'del_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        feed.delete()

    elif action == 'edit_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        argument3 = denull(argument3, none_str)
        idict = {argument2 : argument3}
        # Prompt for auth data
        if argument2 == 'auth' and argument3 is not None:
            from getpass import getpass
            idict['domain'] = nullif( input(_("Enter domain for authentication (NONE for empty): ")), '')
            idict['login'] = nullif( input(_("Enter login: ")), '')
            idict['passwd'] = nullif( getpass(prompt=_("Enter password: ")), '')

        feed.update(idict)


    elif action == 'read_feed':
        params['feed'] = argument
        params['fallback_sort'] = 'pubdate'
        err = feedex.Q.query('', params, rank=False, cnt=False, snippets=False)
        if err == 0: cprint(feedex.Q)

    elif action == 'read_category':
        params['cat'] = argument
        params['fallback_sort'] = 'pubdate'
        err = feedex.Q.query('', params, rank=False, cnt=False, snippets=False)
        if err == 0: cprint(feedex.Q)
    
    elif action == 'examine_feed': cprint(FeedexFeed(feedex, feed_id=argument))
    elif action == 'test_regexes': cprint(FeedexFeed(feedex, feed_id=argument), test_regex=True)
 
    elif action == 'read_entry': cprint(FeedexEntry(feedex, id=argument))

    elif action == 'mark':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'read': denull(argument2, none_str)})
    elif action == 'flag':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({'flag': denull(argument2, none_str)})
    elif action == 'edit_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.update({argument2: denull(argument3, none_str)})
    elif action == 'add_entry':
        entry = FeedexEntry(feedex)
        params['title'] = denull(argument, none_str)
        params['desc'] = denull(argument2, none_str)        
        entry.add(params)

    elif action == 'del_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.delete()



    elif action == 'list_rules':
        err = feedex.Q.list_rules()
        if err == 0: cprint(feedex.Q)

    elif action == 'list_learned_terms':
        err = feedex.Q.list_learned_terms()
        if err == 0: cprint(feedex.Q)

    elif action == 'list_history': 
        err = feedex.Q.list_history()
        if err == 0: cprint(feedex.Q)

    elif action == 'add_rule':
        rule = FeedexRule(feedex)
        params['string'] = denull(argument, none_str)
        params['type'] = 0
        rule.add(params)

    elif action == 'add_regex':
        rule = FeedexRule(feedex)
        params['string'] = denull(argument, none_str)
        params['type'] = 2
        rule.add(params)

    elif action == 'add_stemmed':
        rule = FeedexRule(feedex)
        params['string'] = denull(argument, none_str)
        params['type'] = 1
        rule.add(params)


    elif action == 'edit_rule':
        rule = FeedexRule(feedex, id=argument)
        rule.update({argument2: denull(argument3, none_str)})
    elif action == 'del_rule':
        rule = FeedexRule(feedex, id=argument)
        rule.delete()

    # Main query
    elif action == 'query': 
        err = feedex.Q.query(argument, params, json_file=params.get('json_file'), rank=True, snippets=True, allow_group=True)
        if err == 0: cprint(feedex.Q)
    elif action == 'similar':
        err = feedex.Q.similar(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'term_net':
        err = feedex.Q.term_net(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'time_series':
        err = feedex.Q.time_series(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'rel_in_time':
        err = feedex.Q.relevance_in_time(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'context':
        err = feedex.Q.context(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'trends':
        err = feedex.Q.trends(argument, params)
        if err == 0: cprint(feedex.Q)
    elif action == 'recom':
        err = feedex.Q.recommend(params)
        if err == 0: cprint(feedex.Q)
    elif action == 'trending':
        err = feedex.Q.trending(argument, params)
        if err == 0: cprint(feedex.Q)


    elif action == 'list_categories':
        if params.get('output') in ('cli',None,): params['output'] = 'notes'
        err = feedex.Q.list_feeds(cats_only=True)
        if err == 0: cprint(feedex.Q)
    elif action == 'list_feeds_cats':
        if params.get('output') in ('cli',None,): params['output'] = 'headlines'
        err = feedex.Q.feed_tree()
        if err == 0: cprint(feedex.Q)    
    
    elif action == 'add_category':
        feed = FeedexFeed(feedex)
        feed.add({'title':denull(argument, none_str), 'name': denull(argument, none_str), 'subtitle':denull(argument2, none_str), 'is_category':1})
    elif action == 'del_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.delete()
    elif action == 'edit_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.update({argument2: denull(argument3, none_str)})

    elif action == 'list_flags':
        err = feedex.Q.list_flags()
        if err == 0: cprint(feedex.Q)
    elif action == 'add_flag':
        flag = FeedexFlag(feedex)
        flag.add({'name':denull(argument, none_str), 'desc': denull(argument2, none_str)})
    elif action == 'del_flag':
        flag = FeedexFlag(feedex, id=argument)
        flag.delete()
    elif action == 'edit_flag':
        flag = FeedexFlag(feedex, id=argument)
        flag.update({argument2: denull(argument3, none_str)})

    elif action == 'list_fetches':
        err = feedex.Q.list_fetches()
        if err == 0: cprint(feedex.Q)


    elif action == 'restore_feed':
        feed = FeedexFeed(feedex, feed_id=argument)
        feed.restore()
    elif action == 'restore_category':
        feed = FeedexFeed(feedex, category_id=argument)
        feed.restore()
    elif action == 'restore_entry':
        entry = FeedexEntry(feedex, id=argument)
        entry.restore()

    elif action == 'clear_history': feedex.clear_history()
    elif action == 'delete_learned_terms': feedex.delete_learned_terms()
    elif action == 'empty_trash': feedex.empty_trash()
        


    elif action == 'reindex': feedex.recalculate(ids=argument, batch_size=params.get('batch_size'), index=True, rank=False, learn=False)
    elif action == 'rerank': feedex.recalculate(ids=argument, batch_size=params.get('batch_size'), rank=True, learn=False, index=False)
    elif action == 'relearn': feedex.recalculate(ids=argument, batch_size=params.get('batch_size'), rank=False, learn=True, index=False)


    elif action == 'export_feeds':
        feedex.Q.list_feeds(all=True)
        params['output'] = 'json_dict'
        params['ofile'] = argument
        cprint(feedex.Q)

    elif action == 'export_rules':
        feedex.Q.list_rules()
        params['output'] = 'json_dict'
        params['ofile'] = argument
        cprint(feedex.Q)

    elif action == 'export_flags':
        feedex.Q.list_flags()
        params['output'] = 'json_dict'
        params['ofile'] = argument
        cprint(feedex.Q)


    elif action == 'import_entries_from_file': feedex.import_entries(efile=argument)
    elif action == 'import_entries_from_pipe': feedex.import_entries(pipe=True)

    elif action == 'import_feeds': feedex.import_feeds(argument)
    elif action == 'import_rules': feedex.import_rules(argument)
    elif action == 'import_flags': feedex.import_flags(argument)
    

    elif action == 'import_from_catalog':
        catalog = FeedexCatalog(db=feedex)
        catalog.prep_import(argument)
        if catalog.queue_len > 0: catalog.do_import()


    elif action == 'db_maintenance': feedex.maintenance()

    elif action == 'db_stats': cprint(feedex.stats())


    elif action == 'execute_SQL' and fdx.debug_level not in (None, 0):
        print(_('Executing SQL statement...'))
        feedex.curs.execute(argument)
        feedex.conn.commit()
        print(_('Done.'))

    elif action == 'execute_file_SQL' and fdx.debug_level not in (None, 0):
        print(_('Executing SQL script...'))
        with open( argument, 'r') as sql: sql = sql.read()
        with feedex.conn: feedex.curs.executescript(sql)
        feedex.conn.commit()
        print(_('Done.'))



    elif action == 'test' and fdx.debug_level not in (None,0):
        pass



    # Formalities...
    feedex.close()

    return fdx.ret_status



        	



if __name__ == '__main__':
    ret_status = main() 
    sys.exit(abs(ret_status))


